#!/bin/bash

# Script to create a new project in ~/The-Focus-AI and GitHub
# Usage: ./create-project.sh <project-name> [--copy-files]
# Options:
#   --copy-files    Copy all files from current directory to the new project

set -e  # Exit on any error

# Function to print status messages
print_status() {
    echo "[INFO] $1"
}

print_success() {
    echo "[SUCCESS] $1"
}

print_error() {
    echo "[ERROR] $1" >&2
}

# Parse command line arguments
PROJECT_NAME=""
COPY_FILES=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --copy-files)
            COPY_FILES=true
            shift
            ;;
        -*)
            print_error "Unknown option: $1"
            echo "Usage: $0 <project-name> [--copy-files]"
            exit 1
            ;;
        *)
            if [ -z "$PROJECT_NAME" ]; then
                PROJECT_NAME="$1"
            else
                print_error "Multiple project names provided"
                echo "Usage: $0 <project-name> [--copy-files]"
                exit 1
            fi
            shift
            ;;
    esac
done

# Check if project name is provided
if [ -z "$PROJECT_NAME" ]; then
    print_error "Please provide a project name"
    echo "Usage: $0 <project-name> [--copy-files]"
    exit 1
fi

BASE_DIR="$HOME/The-Focus-AI"
PROJECT_DIR="$BASE_DIR/$PROJECT_NAME"
SOURCE_DIR="$(pwd)"

# Validate project name (no spaces, special characters)
if [[ ! "$PROJECT_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    print_error "Project name can only contain letters, numbers, hyphens, and underscores"
    exit 1
fi

# Check if gh CLI is installed
if ! command -v gh >/dev/null 2>&1; then
    print_error "GitHub CLI (gh) is not installed. Please install it first: brew install gh"
    exit 1
fi

# Check if user is authenticated with GitHub
if ! gh auth status >/dev/null 2>&1; then
    print_error "Not authenticated with GitHub. Please run: gh auth login"
    exit 1
fi

print_status "Creating project: $PROJECT_NAME"

# Create base directory if it doesn't exist
mkdir -p "$BASE_DIR"

# Create project directory
if [ ! -d "$PROJECT_DIR" ]; then
    mkdir -p "$PROJECT_DIR"
    cd "$PROJECT_DIR"
    
    # Copy files from source directory if requested
    if [ "$COPY_FILES" = true ]; then
        print_status "Copying files from $SOURCE_DIR to $PROJECT_DIR..."
        
        # Copy all files and directories, excluding common patterns
        rsync -av \
            --exclude='.git/' \
            --exclude='node_modules/' \
            --exclude='.DS_Store' \
            --exclude='*.log' \
            --exclude='.env' \
            --exclude='.env.local' \
            --exclude='dist/' \
            --exclude='build/' \
            --exclude='target/' \
            --exclude='.vscode/' \
            --exclude='.idea/' \
            "$SOURCE_DIR/" "$PROJECT_DIR/"
        
        print_success "Files copied successfully!"
    fi
    
    # Initialize git repository
    git init
    
    # Create or update README.md if it doesn't exist or wasn't copied
    if [ ! -f "README.md" ]; then
        echo "# $PROJECT_NAME" > README.md
        echo "A new project created on $(date '+%Y-%m-%d')" >> README.md
    else
        print_status "README.md already exists, skipping creation"
    fi

    # Create or update .gitignore if it doesn't exist or wasn't copied
    if [ ! -f ".gitignore" ]; then
        echo "node_modules/" > .gitignore
    else
        # Append common patterns to existing .gitignore if they don't exist
        grep -q "node_modules/" .gitignore || echo "node_modules/" >> .gitignore
        grep -q ".env" .gitignore || echo ".env" >> .gitignore
        grep -q ".DS_Store" .gitignore || echo ".DS_Store" >> .gitignore
        print_status ".gitignore already exists, updated with common patterns"
    fi

    # Initial commit
    git add .
    git commit -m "Initial commit: Project setup for $PROJECT_NAME"
    
    print_success "Local repository created successfully!"
    
    # Create GitHub repository under The-Focus-AI organization
    print_status "Creating GitHub repository under The-Focus-AI organization..."
    if gh repo create "The-Focus-AI/$PROJECT_NAME" --private --source=. --remote=origin --push; then
        print_success "GitHub repository created and linked successfully!"
    else
        print_error "Failed to create GitHub repository. You may need to create it manually."
        print_status "Local repository is ready at: $PROJECT_DIR"
    fi
    
else
    print_error "Project directory '$PROJECT_DIR' already exists"
    exit 1
fi

# Open in Cursor
print_status "Opening project in Cursor..."
if command -v cursor >/dev/null 2>&1; then
    cursor "$PROJECT_DIR"
    print_success "Project opened in Cursor!"
elif [ -d "/Applications/Cursor.app" ]; then
    open -a "Cursor" "$PROJECT_DIR"
    print_success "Project opened in Cursor!"
else
    print_error "Cursor not found. Please install Cursor or open the project manually"
    print_status "Project location: $PROJECT_DIR"
fi

print_success "Project '$PROJECT_NAME' setup complete!"
