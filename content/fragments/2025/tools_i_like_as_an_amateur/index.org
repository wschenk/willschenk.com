#+title: Tools I like as an amateur
#+date: 2025-01-09T22:14:11

I work with [[https://thefocus.ai/][AI professionally]] and as an individual that thinks things
are cool.  Actually getting the overview and understanding the big
picture vs figuring out practical things that work is very different,
and depending on what I'm doing different things catch my attention.

[[https://www.turingpost.com/][Ksenia Se]] and I see a lot of the same stuff, but the things that catch
my attention are quite different. Things like OpenAI releases, new
mid-journey models, the dramas of OpenAI's board room or interesting
Inflection "acuihires" are generally intersecting and gives you a
sense of where the industry is going.

If you are in the trenches, as it were, there are slightly different
thoughts. I'm very interested in things like Ollama, DeepSeek, and the
Vercel AI SDK for example that aren't necessarily interesting from a
general perspective but quite fascinating on what they can enable. I'm
getting to be more of a claude champion (their artifacts are way
better in practice, token caching amazing) which is sort of a gut
feeling based on working different APIs.

[[https://ollama.com/][ollama]] lets you run models in the privacy of your own computer; easy
to download to "regular hardware", no "cost", and playing around with
various parameter tweaking is super interest. There's something
freeing about this.

[[https://www.deepseek.com/][DeepSeek]] is wild both in how cheap it was to train, but it goes back
to the idea of how small can a foundation model really be. There's
something very exciting with this, it feels transformational that
smaller models will be smarter than we can imagine now.

[[https://sdk.vercel.ai/docs/introduction][The Vercel AI SDK]] is like low level code plumbing, that you
technically don't actually need and you could probably just rewrite it
all but it hits the sweetspot of abstractions and usefulness. Its a
breath of fresh air after poking around with LangChain -- what it
attempts is much less, but the balancing of complexity and
functionally is Just Better.

Getting your hands deep into it gives a different perspective and it's
hard to generalize.
