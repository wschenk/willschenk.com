#+title: Coding with SSB
#+draft: true
#+date: 2020-07-15
#+tags[]: javascript, scuttlebutt, p2p, node

[[https://scuttlebutt.nz/][scuttlebutt]] is one of the most interesting things happening on the
internet. A truely decentalized network that doesn't rely upon any
centralized servers, including DNS.  Lets take a look at how to write
some code that interacts with it.

* Startup patchwork

Download and install [[https://ahdinosaur.github.io/patchwork-downloader/][patchwork]] if you haven't already, and connect to
a pub to get some data into the system.  Right now thus tutorial
assumes that you have a ssb profile that's connected to other people.

* Setup your client

We'll begin but setting up a node project and installing some
packages.  =ssb-client= is the library that we'll use to interact with
the local repository, and =timeago.js= is a little formatting library to
make better sense of the times.

#+begin_src bash
npm init -y
npm i ssb-client timeago.js delay
#+end_src

It's also useful to install =ssb-server= so you can interact with your
scuttlebutt instance on the command line.  I hestitate to install
things globally so I'll put this into the local project.

#+begin_src bash
npm i ssb-server
#+end_src

Lets write our first little script that just prints out what our
public id is:

#+begin_src js :tangle whoami.js 
  const ssb = require('ssb-client');

  ssb( (err,sbot) => {
      if( err ) {
          console.log( err );
          process.exit(1);
      }
    
      console.log( sbot.id );
      process.exit(0);
  })
#+end_src

Start up =ssb-server= or =patchwork= if you get a connection refused
error.

* Latest feed entry

Getting the latest entry usihg the CLI can be done with:

#+begin_src bash
./node_modules/.bin/ssb-server getLatest $(node whoami.js)
#+end_src

And as a javascript client

#+begin_src javascript :tangle latest.js
  const ssb = require('ssb-client')
  const timeago = require('timeago.js')

  ssb( (err, sbot) => {
      if( err ) {
          console.log( err );
          process.exit(1);
      }

      const id = process.argv[2] || sbot.id
      console.log( `Getting latest entry for ${id}` )
      sbot.getLatest( id, (err,latest) => {
          if( err ) {
              console.log( err );
              process.exit(1);
          }
          console.log( latest );

          console.log( "Posted", timeago.format( new Date( latest.value.timestamp ) ) )
          process.exit(0);
      });
  } )
#+end_src

This lists out the latest feed entry of a specific id.  The timestamp
is the user's reported timestamp, which is most likely accurate but
not neccesarily so.

* =pull-streams=

=pull-streams= are a great example why functional programming
sucks. Node used to be callback hell, which has been paved over with
async/await hell, and now =pull-streams= are a further variant of this,
another way of solving a problem that in my 25 years of writing
internet software I've not personally encountered.

Lets see if we can figure out how it works.

The basic idea is that we want to do something with a series of
things.  From what I can understand, =pull-stream= is basically a way to
implement go's =range= operator using functions.

A =source= is defined as a function that you call to get the next value.
It can either return the value itself, or that the source is closed.
I'm using the built in =pull.values= function to treat an array as if
it's a source of data.

#+begin_src javascript :tangle pull_test.js
  const pull = require('pull-stream')

  /*
  const range = ( source, closure ) => {
      let done = false;
      while( !done ) {
          source( null, (end, value) => {
              if( end ) {
                  done = true;
              } else {
                  closure( value )
              }
          })
      }
  }
  ,*/
  function range(source) {
      return new Promise( (resolve, reject) => {
          let values = []
          pull( source,
                pull.drain( (e) => values.push(e), (err) => {
                    if( err ) {
                        reject(err);
                    } else {
                        resolve(values);
                    }
                }))
      })
  }
        
  (async () => {
      values = await range( pull.values([1,2,3,4]) )
      console.log( values );
  })()
#+end_src

The nifty thing is that it can also be used to simulate =channels=, so
when you call for the next value it may block waiting for, say,
network input.

Trying it with sbot.links, we can do

#+begin_src javascript :tangle pull_test.js
  const ssb = require('ssb-client')

  async function to_a( source ) {
      return new Promise( (resolve, reject) => {
          let values = [];
          pull( source,
                pull.drain( (v) => {
                    values.push(v)
                },
                            (err) => {
                                console.log( "Done" );
                                if( err ) {
                                    reject(err);
                                } else {
                                    resolve(values);
                                }
                            } )
              )
      })
  }

  ssb( async (err, sbot) =>  {
      if( err ) {
          console.log( err );
          process.exit(1);
      }

      const identity = sbot.id;

      contacts = sbot.links( {
          source: identity,
          rel: 'contact',
          values: true
      })

      console.log( "Looping over contacts" )
      v = await to_a( contacts )
      console.log( `Found ${v.length} entries` );

      process.exit(0);
  } )

#+end_src

* Profile infomation
Lets look at how to [[http://scuttlebot.io/docs/social/view-a-profile.html][view profile information]]:

#+begin_src bash
./node_modules/.bin/ssb-server links --source $(node whoami.js) --dest $(node whoami.js) --rel about --values
#+end_src

This will print out each =about= entry that has been added to the feed.
Some may contain images, others just the text depending upon what the
user did. If we were to use this in a client, we'd probably want show
the union of all the entries with the later ones overwriting the
previous ones.

#+begin_src javascript :tangle profile.js
  const ssb = require('ssb-client')
  const pull = require('pull-stream')
  //const timeago = require('timeago.js')

  const range = (source, closure ) => {
      console.log( "Hi range" )
      let done = false;
      while( !done ) {
          source( null, (end, value) => {
              if( end ) {
                  done = true;
              } else {
                  closure( value )
              }
          })
      }
  }

  const onSsb = (err, sbot) => {
      if( err ) {
          console.log( err );
          process.exit(1);
      }

      const identity = process.argv[2] || sbot.id

      console.log( `Getting profile entries for ${identity}` )

      pull(
          sbot.links( {
              source: identity,
              dest: identity,
              rel: 'about',
              values: true
          }),
          pull.collect( onProfile )
      )
  }

  const onProfile = (err,data) => {
      console.log(data);
      process.exit(0);
  }

  ssb( onSsb );
#+end_src

* Getting a blob

In my feed (@MxUHohGl9IrvS5riir6u11QDAD4+ZtOH0EUZFCMCxyU=.ed25519) I
have a profile image, which is from the blog store.  Let's see how to
get that blob.

On the cli, lets pull out the links:

#+begin_src bash
./node_modules/.bin/ssb-server links \
  --source $(node whoami.js) --dest $(node whoami.js) \
  --rel about --values | awk '/link/ {print $2}' | sed 's/[",]//g'
#+end_src

Which for me prints out:

#+begin_src bash
&vCdJAv0RB34ROOmY7YcE3Gk/OcCfw/mS+KCgD8SGpCI=.sha256
&wXVIfMZq/yI00SGaYkL9NSDkpPUpFd2JTfqh5Urpy8g=.sha256
#+end_src

And we can [[http://scuttlebot.io/docs/advanced/read-a-file.html][pull the out of the blob store]] with:

#+begin_src bash
./node_modules/.bin/ssb-server blobs.get "&wXVIfMZq/yI00SGaYkL9NSDkpPUpFd2JTfqh5Urpy8g=.sha256" > avatar.jpg
#+end_src

Lets implement something similar in javascript.

1. =onSsb= is called once we've made connection
2. We then query =sbot.links= to get about entries.
3. Once we get our array, we call =onProfile=
4.

#+begin_src javascript :tangle profile_pictures.js
  const ssb = require('ssb-client')
  const pull = require('pull-stream')
  const delay = require('delay')

  const onSsb = (err, sbot) => {
      if( err ) {
          console.log( err );
          process.exit(1);
      }

      const identity = process.argv[2] || sbot.id

      console.log( `Getting profile images for ${identity}` )

      pull(
          sbot.links( {
              source: identity,
              dest: identity,
              rel: 'about',
              values: true
          }),
          pull.collect( onProfile(sbot) )
      )
  }

  const onProfile = (sbot) => (err, data) => {
      if( err ) {
          console.log( err );
          process.exit(1)
      }

      //var pull = require('pull-stream')
      //pull(
      //sbot.blobs.get(hash),
      //pull.collect(function (err, values) {
      // eg values.join('') == 'hello, world'
      //    })
      //)
    
      data
          .filter( about => about.value.content.image )
          .map( about => {
              const i = about.value.content.image;
                
              console.log( about.value.content.image );
              console.log( `Getting ${i.link}` );
              pull(
                  sbot.blobs.get( i.link ),
                  pull.collect( (err, data) => {
                      console.log( "Something?" );
                      console.log( err, data )
                  }))
          })

      delay( 2000 ).then( () => process.exit(0) );
  }

  ssb( onSsb );

#+end_src

* Who are you following?
Here we are looking at 
#+begin_src bash
./node_modules/.bin/ssb-server links --source $(node whoami.js) --rel contact --values
#+end_src

#+begin_src javascript :tangle following.js
  const ssb = require('ssb-client')
  const pull = require('pull-stream')
  const timeago = require('timeago.js')

  const onSsb = (err, sbot) => {
      if( err ) {
          console.log( err );
          process.exit(1);
      }
      const identity = sbot.id;

      console.log( `Getting profile entries for ${identity}` )

      pull(
          sbot.links( {
              source: identity,
              rel: 'contact',
              values: true
          }),
          pull.collect( onLinks )
      )
  }

  const onLinks = (err, data) => {
      if( err ) {
          console.log( err );
          process.exit(1)
      }

      data.map( about => {
          console.log( about );
          console.log( "Post", timeago.format( new Date( about.value.timestamp ) ) );
      })

      process.exit(0);
  }

  ssb( onSsb );

#+end_src


* Getting Started
Since SSB is totally decentralized, you need to know someone to get on.  Once you connect with a real person
you'll be able to see their activity and their friends activity, and as you start interacting with them
they will start being able to see you.

But there's a boot strapping problem with that

* References
- [[https://www.scuttlebutt.nz/][Current SSB Landing Page]]
- [[https://handbook.scuttlebutt.nz/guides/ssb-server/tutorial][ssb-server tutorial]]
- [[https://hacks.mozilla.org/2018/08/dweb-social-feeds-with-secure-scuttlebutt/]]
- [[https://josiahwitt.com/2018/07/08/scuttlebutt-intro-test-playground.html]]
- [[https://ssbc.github.io/docs/scuttlebot/install.html]]
- https://handbook.scuttlebutt.nz/guides/ssb-server/install
- [[http://git.scuttlebot.io/%25YAg1hicat%2B2GELjE2QJzDwlAWcx0ML%2B1sXEdsWwvdt8%3D.sha256]]

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
