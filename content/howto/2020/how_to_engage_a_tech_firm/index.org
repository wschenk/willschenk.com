#+title: Making rocks think: thinking about software
#+subtitle: or how to be a good client
#+tags[]: overview
#+date: 2020-01-08
#+draft: true

* Intro
At 4AM you stare up at the ceiling, your mind racing about everything yet nothing in particular. We're getting close to launch time, and there have been so many comprimises and features that have been cut, things are buggy but starting to come together, and is it good enough to put out there? In the dark of the night it feels like the whole thing will end in shame and embarrisment.  Is the site going to work? Maybe this whole start your own business thing is just setting yourself up for failure, there was absolutely no reason to do something so risky and foolish and it's not going to work and you'll be out of all this money that you need.

There are so many things that you would have done differently if only you had known. The engineers are smart in a sort of computery way but they have no idea about managing cash flow or trying to actually sell things. You've spent all your patience over the last months clearly explained things to so-called skilled people, and frankly you are on the fence if they are putting an honest effort into understanding what you need or if they aren't actually messing with you. Half the time they are condescending and smug, and the other time they are gosh wow kids excited about with their new toys.

Plus the whole thing has dragged on longer and is way more of a pain in the ass than you expected. Why can't anything just be done?  Why does it take so long?

* Who is this for?
One of the most difficult things about managing a software project is the mismatch of mental models that various critical people who make the project successful have.  When everything is going well, each contribute parts that only they can; conversely, well meaning people can work at cross purposes and the project gets delay, budgets over run, or what's build is otherwise unsuitable for its intended purpose. It often turns into a mess.

If you want to build some software, what do you do?  How do you talk about it, and what are the tricky things to look out for?  I'm going to walk through some things that will hopefully increase the chances of your success.

There's an element of the occult when you get down to the bottom of technology.  It's all hidden knowledge, inscruitable behing all of the math and data centers and blinking lights.

Computers are made of silicon. We are making rocks think. It can get weird. 

* Dramatis Personae
Lets talk about the people involved with a successful software project.
* Some common mental models
First, lets get a lay of the land to figure out what we are actually doing.  What, exactly, is software?  How does it work?  People bring all sorts of mental models with them -- ways in their heads that they use to help understand what software is like.

Lets talk about some common ones, all of which are true to a point but can also be false and misleading in other ways.

** Like building a house
*** Similarities
- Start with a blue print
- General contractors hide a lot of complexity of managing specialists for you
- Always over budget and over time
*** Not at all the same
- Adding capital will in general increase asset value; software easily goes to zero
- No tangible asset -- it's often between to throw everything out in software

** Like math
*** Similarities
- It attracts similar sorts of people
- Very focused around patterns and logic
- Seems like its got a lot to do with numbers
*** Not at all the same
- Lots of messy trade offs

** Like writing
*** Similarities
- About ideas and concepts, lot of copywriting
- You spend most of the time debugging/editing 
- Highly iterative
- Seems like it should be easier until you try
*** Not at all the same
- Lot of mathematical constraints
- Extensive infrastructure to get started
- Everyone involved in software has poor communication skills

** Like a making a movie
*** Similarities
- Hit based where few get all rewards
- No one knows anything
- Once something is successful, massive copy cats
- Massive marketing is necessary, but not sufficient
- Adapted from source material, often unrecognizably
- Tension between suits and creatives destroy things
*** Not at all the same
- Staffing requirements for software continues to increase over the life cycle
- No "opening box office" concept, just keeps going forever
- A movie is more of a "thing" than software, which is more like an ecology

* What, exactly are we doing?
One concept that which is thrown around a lot is "agile". Originally a politcal rallying cry of software developers that weren't getting the respect that they thought that they deserved, this is a software engineering methodology that puts developers first and emphasises small, interative changes and tries to push back against big detailed plans in the beginning of the process.  The idea here is that, instead of 
** Complexity
Get the image from here https://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp

The first thing to understand is how ambitious you want and need to be.  Software is something that in
sright the first time, not taking into the account that most of the work is to actually figure out what "it" is.  You can easily spend a huge amount of effort, with no actual results, trying to solve a problem that you don't really understand with the wrong level of ambition.  Sometimes a bicycle is a better solution than building both a factory that builds a car and at the same time the infrastructure needg fg.f pogfgfed to build and pave roads.
 
First thing is to figure out how to keep it as simple as possible.  You can always change it later, and it's cheaper to build something once you really know what you are building.  Never build something that you don't know if you'll really need.

** Life cycle
Find that Kent Beck article

https://www.facebook.com/notes/kent-beck/the-product-development-triathlon/1215075478525314/

*** Experiment
*** Explore
*** Expand
*** Operate

* Engineering is about tradeoffs
There is no right answer. Any choice has good and bad things about it.  In order to make the right choice you need to understand the context of where you are operating.
* Managing expectations
Programers tend to over promise and under deliver, which is not fun for anyone. Sales tends to oversell and let the delivery team deal with the mess later.
* Product Manager is the key hire
- They sit between business, design and technology
- What is the right thing to build for the business at this moment
- How do you make tradeoffs?
* Design is how it works
** A messy process to get to something clean
** Intuition about complexity is often wrong
