* Early Tech: Managing a Tech Team
- What are we talking about
- What are we building
- Who do I need
- What goes wrong
* Who am I
* About HappyFunCorp
* What are we talking about?
** Software is like building
** Software is like math
** Software is like writing
** Software is like making a hit movie
* What are we building?
** MVP
** Skate board
** Scooter
** Bicycle
** Car
** Jet plane
* Who do I need
** Engineers
** CTO
** Product Manager
** Project Manager
** Designers
* When to outsource?
** Escalation path and expectation setting
- When something goes wrong, you can point a finger somewhere
- Large network of people to tap into
- Not alone
** Recruiting
- How to recruit them
- How to retain them
- "Why get married on your first date?"
** Expertise
- Generalists vs specalists
- People who love the craft, not necessarily your vision
** Scaling
- Scale up and down the team
- Fractional resources
- Replace resources as needed
** People problems
- Managing a lot of people is hard, and this lets you push that off
- A company is very different > 10 people
* When not to outsource?
** Control
- You have more power when people report directly
- You can control information to workers
- It makes investors happy
** Company tangibility
- Having "employees" and people reporting to you makes the company seem more real
- Acquihiring becomes an exit stragey
- Investors like it
** Cost
- "We don't compete on price"
- If you knew how to hire and manage this specialized talent, you could do it cheaper
** Keep the core
- You get better at what you do
- Hands on in the core of the business, outsource everything else
** My profit is your cost of doing business
- If you knew how to hire and manage my people
- You would lower your cost exactly my profit
- If you make the mistake yourself, you learn from it
** Business relationship forces
- Commercials are necessary for good business relationships
- Aren't always in alignment

* What goes wrong?
** How to recruit?
** How much do you pay for them?
** Making up stuff for them to do?

