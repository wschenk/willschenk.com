#+title: Tailwind and Rails
#+subtitle: postcss setup
#+tags[]: rails, tailwind, postcss
#+date: 2020-11-18
#+aliases[]: /articles/2020/tailwind_and_rails

Tailwind is a really nice set of CSS utility classes that let you
style up a page staying largely in one file at a time.  Rails has it's
own wild way of dealing with javascript, so lets go through how to
make them play well together.

* Install tailwindcss

Make sure that you have node 12.13 or higher:

#+begin_src bash
node -v
#+end_src

If not, then upgrade node.


Inside of your rails project, install =tailwind=.  We need to use the
[[https://tailwindcss.com/docs/installation#post-css-7-compatibility-build][PostCSS 7 compatibility build]] at this time since not all of our
plugins are updated.

#+begin_src bash
yarn add tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9
#+end_src

Then we create a directory =app/javascript/stylesheets= that we will
have tailwind use.  Create a file
=app/javascript/stylesheets/application.scss= and import the tailwind
components.  If you need to extract and apply different components you
can do it here.

#+begin_src css
@import "tailwindcss/base";
@import "tailwindcss/components";

// You can add your own custom components/styles here

@import "tailwindcss/utilities";
#+end_src

Finally, we need to add =tailwindcss= to the =postcss= pipeline.  In =postcss.config.js=:

#+begin_src javascript
module.exports = {
    plugins: [
        require('tailwindcss'),
        require('autoprefixer'),
        require('postcss-import'),
        require('postcss-flexbugs-fixes'),
        require('postcss-preset-env')({
            autoprefixer: {
                flexbox: 'no-2009'
            },
            stage: 3
        })
    ]
}
#+end_src


* Configuring webpacker

First we need to tell =app/javascript/packs/application.js= to use the
new sass sheet:

#+begin_src javascript
// Put this at the end
require("stylesheets/application.scss")
#+end_src

And then add the =stylesheet_pack_tag= to your layout

In =app/views/layouts/application.html.erb=:

#+begin_src html
        <!-- This refers to app/javascript/stylesheets/application.scss-->
        <%= stylesheet_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
#+end_src

And then update the =body= style with a little tailwind goodness, so we can test it out:

#+begin_src html
    <body class="bg-gray-100 text-white-900 w-3/4 mx-auto p-4">
#+end_src

Which we can do by creating a simple route:

#+begin_src bash
rails g controller home index
#+end_src

And in =config/routes.rb= add a

Which will let you see the generated javascript in real life by
starting up rails and going to http://localhost:3000

* Setting up production purging

We're going to [[https://tailwindcss.com/docs/controlling-file-size][follow tailwind purgecss directions]] and create a
=tailwind.config.js= file.

#+begin_src javascript
module.exports = {
  purge: [
    './app/**/*.html',
    './app/**/*.erb',
    './app/**/*.vue',
    './app/**/*.jsx',
  ],
  theme: {},
  variants: {},
  plugins: [],
}
#+end_src

Add in any additional filetypes depending upon which templating system
you are using.

* Customizing the theme

Tailwind has a lot of ways to [[https://tailwindcss.com/docs/theme][change the theme]], but lets walk through how to add a different font for the site.

First we'll add a font via npm, from the [[https://fontsource.github.io/search-directory][fontsource]] project.

#+begin_src bash
yarn add fontsource-dosis
#+end_src

Then, we need to tell webpacker to include it, which is driven off of
=app/assets/javascripts/pack/application.js=.  Add the required require:

#+begin_src javascript
require('fontsource-dosis')
#+end_src

Then we are need to tell =tailwind= to use this new font. First we import the default theme, and then we'll add our new =fontFamily= to the front:

#+begin_src javascript
const defaultTheme = require("tailwindcss/defaultTheme");

module.exports = {
    purge: {
         content: [
            './app/**/*.html',
            './app/**/*.erb',
            './app/**/*.vue',
            './app/**/*.jsx',
        ]},
    theme: {
        extend: {
            fontFamily: {
                sans: ["Dosis", ...defaultTheme.fontFamily.sans]
            }
        }
    },
    variants: {},
    plugins: [],
}
#+end_src

Note that rails is only checking to see if the =application.js= file has
changed inside of the =app/assets= folder, so if you make a change to
the =tailwind.config.js= file you need to touch =application.js= to
trigger a rebuild.

* References

1. https://web-crunch.com/posts/how-to-install-tailwind-css-using-ruby-on-rails
2. https://rubyyagi.com/tailwind-css-on-rails-6-intro/
4. https://tailwindcss.com/docs/theme

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
