#+title: asdf as environment manager
#+subtitle: so much faster
#+tags[]: asdf
#+date: 2021-03-13
#+aliases[]: /articles/2021/asdf_as_environment_manager

I've switch to using [[https://asdf-vm.com/][asdf]] to manage my computers version of different
programming environments.  This is both a more unified approach to
using both =nvm= and =rbenv=, since it handles a lot more programming
languages, but the implementation is also faster.

* Installing =asdf=

Go to the [[https://asdf-vm.com/#/core-manage-asdf][asdf getting started page]] to get the latest version:

#+begin_src bash
git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.0
#+end_src

Then add this to your =~/.bashrc=:

#+begin_src bash
. $HOME/.asdf/asdf.sh
#+end_src

* Add a plugin

Different languages are supported using plugins, so first we need to
install a plugin.  For example:

#+begin_src bash
asdf plugin add deno
#+end_src

* Updating plugins

=asdf= itself has the code to manage the environment directories and
keeping track of the packages.  The =plugins= know all about a specific
environment.  So if you want to get the latest version of, say, deno,
you need to update the plugin because that's where the build
instructions live.

#+begin_src bash :results output
asdf plugin update --all
#+end_src

* Installing a version

This will list all available versions for a specific environment:

#+begin_src bash
asdf list all deno
#+end_src

We can install the latest with:

#+begin_src bash :results output
asdf install deno latest
#+end_src

#+RESULTS:
: ∗ Downloading and installing deno...
: Archive:  /home/wschenk/.asdf/installs/deno/1.8.1/bin/deno.zip
:   inflating: /home/wschenk/.asdf/installs/deno/1.8.1/bin/deno  
: The installation was successful!

We can install a specific version with:

#+begin_src bash :results output
asdf install deno 1.6.3
#+end_src

#+RESULTS:
: ∗ Downloading and installing deno...
: Archive:  /home/wschenk/.asdf/installs/deno/1.6.3/bin/deno.zip
:   inflating: /home/wschenk/.asdf/installs/deno/1.6.3/bin/deno  
: The installation was successful!

* Selecting a version to use

There are 3 different scopes for usage:

#+ATTR_HTML: :class table table-striped 
| =global= | written into =~/.tool-version=, the default unless overridden |
| =shell=  | the version that the current shell defaults to              |
| =local=  | written into $PWD/.tool-version, overridden by directory    |

In our case, I'm going to do

#+begin_src bash :results output
asdf global deno 1.6.3
#+end_src

Then

#+begin_src bash :results output
deno --version
#+end_src

#+RESULTS:
: deno 1.6.3 (release, x86_64-unknown-linux-gnu)
: v8 8.8.294
: typescript 4.1.3

* Conclusion

There seems to be a lot less shell overhead when using =asdf= vs =rbenv=
and all the other ones, so I found that in practice it really sped up
my system when running something that created a lot of subshells
(=./configure= for example.)
