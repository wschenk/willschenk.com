#+title: Exploring a git repository
#+subtitle: just dump everything directly into sqlite
#+tags[]: git
#+date: 2021-03-24
#+PROPERTY: header-args :db output/commits.db
#+draft: true

* Dockerfile

#+begin_src Dockerfile :tangle Dockerfile
FROM ruby:3.0.1

RUN apt-get update && apt-get install -y cloc libsqlite3-dev

WORKDIR /app

COPY Gemfile* ./
RUN bundle install

#COPY *.rb *sh ./
#RUN chmod +x *.sh *rb
#ENTRYPOINT "/app/entry_point.sh"

CMD bash
#+end_src

#+begin_src bash :tangle gitinfo
  export REPO=https://github.com/ruby-git/ruby-git
  mkdir -p output
  docker build . -t wschenk/gitinfo && \
      docker run --rm -it \
             -v $PWD/output:/output \
             -v $PWD:/app \
             --env REPO=$REPO \
             wschenk/gitinfo
#+end_src

#             -v $PWD:/app \

* =entry_point= Script

1. Checkout the repostory
2. Create the work directory
3. Run the scripts
   
#+begin_src bash :tangle entry_point.sh
  #!/bin/bash
  export REPO_WORK_DIR=/repository
  export WORK_DIR=/output

  if [ -d ${REPO_WORK_DIR} ]; then
     echo Using repo in ${REPO_WORK_DIR}
  else
      if [ -z "$REPO" ]; then
          echo Please set the REPO env variable or mount ${REPO_WORK_DIR}
          exit 1
      fi

      git clone $REPO ${REPO_WORK_DIR}
  fi

  if [ ! -d ${WORK_DIR} ]; then
      echo Creating ${WORK_DIR}
      mkdir -p ${WORK_DIR}
  fi


  # Create a log of commits
  #(cd ${REPO_WORK_DIR};git log --reverse --pretty='format:%aI|%ae|%an|%D') | sort > ${WORK_DIR}/commits.log

  # Create a list of authors
  #(cd ${REPO_WORK_DIR};git log --pretty=format:"%ae:%an") | sort -u > ${WORK_DIR}/authors.log

  # Create a log of commits with files
  (
      cd ${REPO_WORK_DIR}
      git log --pretty=format:'|%H|%ae|%an|%aI|%s' --numstat
  ) > ${WORK_DIR}/commits_with_files.log

  # Create a list of tags
  (
      cd ${REPO_WORK_DIR}
      git tag --sort=-v:refname --format='%(refname:short):%(objectname):%(*objectname):%(creatordate:iso8601-strict)'
  ) > ${WORK_DIR}/tags.log

  cd ${WORK_DIR}

  for i in /app/*rb; do
      ruby $i
  done
#+end_src

* Files

We'll need a =Gemfile= to include for the sqlite3 gem.

#+begin_src ruby :tangle Gemfile
  # frozen_string_literal: true

  source "https://rubygems.org"

  git_source(:github) {|repo_name| "https://github.com/#{repo_name}" }

  gem "sqlite3", "~> 1.4"
#+end_src

* Commits

Lets first populate the database with all of the commits, and files
associated with those commits.

This works off a file created with

#+begin_src bash
  git log --pretty=format:'|%H|%ae|%an|%aI|%s' --numstat
#+end_src

/Note that we are creating a =tag= attribute in commits which will we
populate later./

#+begin_src ruby :tangle 0commits.rb
  require 'sqlite3'

  def create_database filename
    db = SQLite3::Database.new filename

    rows = db.execute <<-SQL1
         CREATE TABLE IF NOT EXISTS commits (
                id	TEXT UNIQUE,
                tag TEXT,
                summary	TEXT,
                author_name	TEXT,
                author_email	TEXT,
                author_when	DATETIME
                );
  SQL1

    rows = db.execute <<-SQL2
         CREATE TABLE IF NOT EXISTS commit_files (
                id    TEXT,
                name  TEXT,
                added INT,
                deleted INT
                );
  SQL2

    db
  end

  def add_commit db, id, email, name, date, summary
    ret = db.execute("INSERT INTO commits (id, summary, author_name, author_email, author_when)
          VALUES (?, ?, ?, ?, ?)", [id, summary, name, email, date ] )
  end

  def add_file_commit db, id, file, added, deleted
    ret = db.execute("INSERT INTO commit_files (id, name, added, deleted)
          VALUES (?, ?, ?, ?)", [id, file, added, deleted] )

  end

  def parse_file db, file
    commit = nil
    File.open( file ).each_line do |line|
      line.chomp!
      if line[0] == '|'
        md = /\|(.*?)\|(.*?)\|(.*?)\|(.*?)\|(.*)/.match( line )
        commit = md[1]

        puts line

        begin
          add_commit db, md[1], md[2], md[3], md[4], md[5]
        rescue SQLite3::ConstraintException
          puts "Found existing commit, exiting"
          return
        end
      elsif line.length != 0
        md = /([\d|-]*)\s*([\d|-]*)\s*(.*)/.match( line )
        add_file_commit db, commit, md[3], md[1], md[2]
      end
    end
  end

  db = create_database "commits.db"
  db.transaction
  parse_file db, "commits_with_files.log"
  db.commit
#+end_src
* Looking at Entities
** All Entities all Authors

We can look at who changed which file the most.

#+begin_src sqlite :colnames yes
  select author_name, name,
    count(name) as times_touched,
    sum(added) as lines_added,
    sum(deleted) as lined_deleted,
    date(max(author_when)) as most_recently
  from commits, commit_files
  where commits.id = commit_files.id
  group by author_name, name
  order by times_touched desc
    limit 10;
#+end_src

#+RESULTS:
#+ATTR_HTML: :class table table-striped
| author_name      | name              | times_touched | lines_added | lined_deleted | most_recently |
|------------------+-------------------+---------------+-------------+---------------+---------------|
| scott Chacon     | lib/git/lib.rb    |            41 |         775 |           167 |    2008-01-31 |
| scott Chacon     | lib/git/base.rb   |            28 |         504 |            49 |    2008-01-31 |
| robertodecurnex  | lib/git/lib.rb    |            25 |         221 |           128 |    2014-06-25 |
| scott Chacon     | camping/gitweb.rb |            18 |         667 |           112 |    2007-11-29 |
| scott Chacon     | lib/git/object.rb |            18 |         349 |            69 |    2007-11-27 |
| scott Chacon     | README            |            17 |         473 |           209 |    2007-11-27 |
| scott Chacon     | lib/git.rb        |            17 |         137 |            42 |    2007-11-20 |
| Roberto Decurnex | lib/git/lib.rb    |            16 |         386 |           243 |    2016-02-25 |
| robertodecurnex  | lib/git/base.rb   |            14 |          95 |            28 |    2014-01-15 |
| Roberto Decurnex | README.md         |            13 |          54 |            23 |    2016-02-25 |
** Who touched a file the most recently

We can also look at who touched a file in general, to get a sense of
maybe who knows how it works.  If the last person who touched it is
the person who owns it, you know who to look for.

#+begin_src sqlite :colnames yes
  select
    name,
    author_name,
    date(max(author_when)) as last_touched,
    count(name) as times_touched,
    sum(added) as lines_added
  from commits, commit_files
  where commits.id = commit_files.id
     and name = 'README.md'
  group by author_name
  order by last_touched desc
  limit 100
#+end_src

#+RESULTS:
#+ATTR_HTML: :class table table-striped
| name      | author_name       | last_touched | times_touched | lines_added |
|-----------+-------------------+--------------+---------------+-------------|
| README.md | James Couball     |   2020-12-28 |             3 |          31 |
| README.md | Hidetaka Okita    |   2020-12-22 |             1 |           1 |
| README.md | Alex Mayer        |   2020-12-20 |             2 |         225 |
| README.md | Ofir Petrushka    |   2020-09-05 |             1 |          15 |
| README.md | Salim Afiune      |   2019-09-20 |             1 |           1 |
| README.md | Evgenii Pecherkin |   2018-10-02 |             1 |           2 |
| README.md | Kelly Stannard    |   2018-07-12 |             1 |           1 |
| README.md | Joshua Liebowitz  |   2018-06-25 |             1 |           1 |
| README.md | Per Lundberg      |   2018-05-16 |             2 |           4 |
| README.md | Roberto Decurnex  |   2016-02-25 |            13 |          54 |
| README.md | Guy Hughes        |   2014-05-21 |             1 |           2 |
| README.md | robertodecurnex   |   2014-01-15 |             2 |          17 |
| README.md | Andy Schrage      |   2013-12-17 |             1 |           1 |
| README.md | schneems          |   2011-10-19 |             1 |         251 |

* Tags

Now lets populate the tag information.  We are banking on the idea
that a lot of projects will automatically tag a release as part of
their build scripts.

This file is created with:

#+begin_src bash
  git tag --sort=-v:refname --format='%(refname:short):%(objectname):%(*objectname):%(creatordate:iso8601-strict)'
#+end_src

#+begin_src ruby :tangle 1tags.rb
  require 'sqlite3'

  def create_database filename
    db = SQLite3::Database.new filename

    rows = db.execute <<-SQL1
         CREATE TABLE IF NOT EXISTS tags (
                name TEXT UNIQUE,
                sha TEXT,
                object TEXT,
                author_email TEXT,
                created_at DATETIME
                );
  SQL1

    return db
  end

  def add_tag db, name, sha, object, created_at, author_email
    ret = db.execute("INSERT INTO tags (name, sha, object, created_at, author_email)
              VALUES (?, ?, ?, ?, ?)", [name, sha, object, created_at, author_email])
  end

  def parse_file db, file
    commit = nil
    File.open( file ).each_line do |line|
      line.chomp!
      md = line.match( /(.*?):(.*?):(.*?):(.*)/ )

      if( !md )
          puts "Unrecognized line #{line}"
      else
        tag_name = md[1]
        sha = md[2]
        sha_object = md[3] unless md[3] == "" # have annotated tags point to the main commit
        created_at = md[4]

        tagger = db.execute( "select author_email from commits where id = (?) or id = (?)", [sha, sha_object == "" ? sha : sha_object] ).first

        begin
          add_tag db, tag_name, sha, sha_object, created_at, tagger
        rescue SQLite3::ConstraintException
          puts "Found existing tag, exiting"
          return
        end
      end
    end
  end

  def tag_commits db
    last_date = nil
    db.execute( "select name, created_at from tags where created_at is not null order by created_at asc" ).each do |row|
      if last_date.nil?
        db.execute( "update commits set tag = (?) where author_when <= (?)", [row[0], row[1]] )
      else
        db.execute( "update commits set tag = (?) where author_when <= (?) and author_when > (?)", [row[0], row[1], last_date] )
      end

      last_date = row[1]
    end

    db.execute( "update commits set tag = 'HEAD' where author_when > (?)", [last_date] )
  end

  db = create_database "commits.db"
  db.transaction
  parse_file db, "tags.log"
  tag_commits db
  db.commit
#+end_src

So if you wanted to find out who tagged what when you could use the query:

#+begin_src sqlite :colnames yes
  select id, name, summary, author_name, created_at
  from tags, commits
  where id=object or id=sha
  order by created_at desc;
#+end_src

* Things that changed in a release

Let's come up with some queries to tell us what has changed during a
certain time period. What we are going to do applies best to repos
that have trunk-on-main, meaning that there's a more or less basic
branching strategy and we can just look at commits based upon
timestamp.

** Commit Messages

#+begin_src sqlite :colnames yes
   select
     author_name,
     tag,
     summary
   from commits
   where tag = 'v1.8.1'
   
#+end_src

#+RESULTS:
| author_name   | tag    | summary                                                       |
|---------------+--------+---------------------------------------------------------------|
| James Couball | v1.8.1 | Release v1.8.1 (#508)                                         |
| James Couball | v1.8.1 | Add all appropriate files (excluding tests) to the gem (#507) |

** File changes

If we wanted to focus our testing on what has changed in a release,
here's a map to get you started.

#+begin_src sqlite :colnames yes
  select
    author_name,
    name,
    count(commits.id) as changes,
    sum( added ) as lines_added
  from commits, commit_files
  where commits.id = commit_files.id
      and commits.tag = 'v1.8.1'
  group by name, author_name
  order by name
#+end_src

#+RESULTS:
| author_name   | name               | changes | lines_added |
|---------------+--------------------+---------+-------------|
| James Couball | CHANGELOG.md       |       1 |           4 |
| James Couball | git.gemspec        |       1 |           5 |
| James Couball | lib/git/version.rb |       1 |           1 |

Which can we verify by [[https://github.com/ruby-git/ruby-git/compare/v1.8.0...v1.8.1][looking at github]].

* Finding authors

We can look at the commits to find some information about the
contributors.  We'll look at:

#+ATTR_HTML: :class table table-striped
| Name                     | Their reported name        |
| Email                    | Their reported email       |
| Number of commits        | Total over time            |
| Number of tags           | Total over time            |
| First Contribution       | First time we saw them     |
| Most recent contribution | Last time we saw them      |
| First reported timezone  | Guess as to where they are |

The query is basically:

#+begin_src sqlite :colnames yes
  select
    author_name,
    count(*) as cnt,
    date(min(author_when)) as earliest,
    date(max(author_when)) as latest
  from commits
  group by author_email
  having cnt > 2
  order by count(*) desc
#+end_src

#+RESULTS:
#+ATTR_HTML: :class table table-striped
| author_name      | cnt |   earliest |     latest |
|------------------+-----+------------+------------|
| Roberto Decurnex | 147 | 2013-04-03 | 2016-02-25 |
| scott Chacon     |  47 | 2007-11-10 | 2008-01-31 |
| scott Chacon     |  34 | 2007-11-07 | 2007-11-29 |
| Josh Nichols     |  24 | 2009-04-27 | 2011-09-02 |
| schacon          |  21 | 2008-03-03 | 2009-08-10 |
| James Couball    |  20 | 2019-02-17 | 2021-01-18 |
| Daniel Mendler   |   8 | 2009-02-07 | 2009-02-12 |
| Per Lundberg     |   8 | 2018-01-10 | 2018-08-10 |
| Roberto Decurnex |   8 | 2014-06-09 | 2014-09-29 |
| Vern Burton      |   6 | 2018-03-07 | 2020-12-22 |
| elliottcable     |   4 | 2009-02-12 | 2009-02-12 |
| James Rosen      |   4 | 2008-12-21 | 2008-12-21 |
| Kelly Stannard   |   4 | 2014-08-06 | 2014-08-07 |
| Yuichi Tateno    |   3 | 2008-07-25 | 2008-07-25 |
| Jorge Bernal     |   3 | 2008-05-05 | 2008-05-06 |
| Michael Mallete  |   3 | 2013-05-23 | 2013-05-24 |

#+begin_src ruby :tangle 2authors.rb
  require 'sqlite3'

  def create_database filename
    db = SQLite3::Database.new filename

    rows = db.execute <<-SQL1
         CREATE TABLE IF NOT EXISTS authors (
                email text unique,
                name text,
                total_commits integer,
                total_tags integer default 0,
                earliest DATETIME,
                latest DATETIME,
                timezone_offset text
                );
  SQL1
    rows = db.execute( "DELETE FROM authors;" );
    return db;
  end

  db = create_database "commits.db"
  db.transaction

  # Preload the tag counts
  tag_counts = {}
  db.execute(
    "select commits.author_email, count(name) from tags, commits where id=object or id=sha group by commits.author_email"
  ).each do |row|
    tag_counts[row[0]] = row[1]
  end

  db.execute( "select
      author_email,
      author_name,
      count(*) as cnt,
      min(author_when) as earliest,
      max(author_when) as latest
    from commits
    group by author_email
    order by count(*) desc" ).each do |row|
      email, name, cnt, earliest, latest = row
      tag_count = tag_counts[email] || 0

      ending = earliest[-6..-1] || earliest

      timezone_offset = ""
      if( ending =~ /[-+]\d\d:\d\d/ )
        timezone_offset = ending
      end

      db.execute( "INSERT INTO authors 
                  (email,name,total_commits,total_tags,earliest,latest,timezone_offset) 
                  values 
                  (?,?,?,?,?,?,?)", [email, name, cnt, tag_count, earliest, latest, timezone_offset] );
  end

  db.commit
#+end_src

Lets take a look at this table for our test repo.  Lets look at all
the people who created a tag, ordering it by the last time they were
active in the repo.

The story this tells is the maintainership of the repo over time.

#+begin_src sqlite :colnames yes
  select name, date(earliest), date(latest), total_commits, total_tags, timezone_offset
         from authors
       where total_tags > 0
       order by latest desc
#+end_src

#+RESULTS:
#+ATTR_HTML: :class table table-striped
| name             | date(earliest) | date(latest) | total_commits | total_tags | timezone_offset |
|------------------+----------------+--------------+---------------+------------+-----------------|
| James Couball    |     2019-02-17 |   2021-01-18 |            20 |          3 |          -08:00 |
| James Couball    |     2020-04-25 |   2020-04-25 |             1 |          1 |          -07:00 |
| Per Lundberg     |     2018-01-10 |   2018-08-10 |             8 |          2 |          +02:00 |
| Roberto Decurnex |     2013-04-03 |   2016-02-25 |           147 |          5 |          -03:00 |
| Roberto Decurnex |     2014-06-09 |   2014-09-29 |             8 |          2 |          -03:00 |
| Josh Nichols     |     2009-04-27 |   2011-09-02 |            24 |          6 |          -04:00 |
| schacon          |     2008-03-03 |   2009-08-10 |            21 |          2 |          -08:00 |
| Joshua Peek      |     2008-03-15 |   2008-03-15 |             1 |          1 |          -05:00 |
| scott Chacon     |     2007-11-10 |   2008-01-31 |            47 |          1 |          -08:00 |


We can see that the stewardship of this repo was something like:

Originally Scott Chacon (West Coast) and Josua Peek (East Coast) in
2007-2008.

Josh Nichols (East Coast) in 2009-2011.

Roberto Decurnex (-3 is probably Brazil?) in 2013-2014, when there was
quite a lot of activity.

Per Lundberg (+2 is probably in Europe) 2018.

And currently James Couball from 2019 to 2021, hailing again from the
West Coast.

* Identifing file types
** Using =cloc=
Let's use the =cloc= program to try and map out what sorts of file are
in the repository, how many lines of code vs comments vs white spaces.

=cloc= can work by using a git tag or object, and it will look at the
repository at that state.  We'll start by inventoring the current
state, and then go back for each tag to see what that snapshot looks
like.

#+begin_src ruby :tangle 3cloc.rb
  require 'sqlite3'
  require 'csv'
  exit
  def create_database filename
    db = SQLite3::Database.new filename

    rows = db.execute <<-SQL1
         CREATE TABLE IF NOT EXISTS file_stats_summary (
                sha text,
                tag text,
                author_name text,
                author_email text,
                author_when text,
                code_lines integer,
                comment_lines integer,
                blank_lines integer
                );
  SQL1
    rows = db.execute "delete from file_stats_summary";

    rows = db.execute <<-SQL1
         CREATE TABLE IF NOT EXISTS file_stats (
                sha text,
                filename text,
                language text,
                code_lines integer,
                comment_lines integer,
                blank_lines integer
                );
  SQL1
    rows = db.execute "delete from file_stats";
    return db;
  end

  def import_cloc_output db, sha
    puts "Finding stats for #{sha}"
    output = `(cd #{ENV['REPO_WORK_DIR']};cloc --skip-uniqueness --quiet --by-file --csv --git #{sha})`
    CSV.parse(output).each do |row|
      next if row == []
      next if row[0] == 'language'
      if row[0] == 'SUM'
        return { code_lines: row[4], comment_lines: row[3], blank_lines: row[2] }
      else
        ret = db.execute(
          "INSERT INTO file_stats (sha, filename, language, code_lines, comment_lines, blank_lines)
          VALUES (?, ?, ?, ?, ?, ?)",
          sha, row[1], row[0], row[4], row[3], row[2] )
      end
    end
  end

  def find_commit db, sha, obj
    row = db.execute( "select author_name, author_email, author_when from commits where id=(?) or id=(?)", [sha, obj] ).first

    return nil if row.nil?
    return {author_name: row[0], author_email: row[1], author_when: row[2]}
  end

  def add_summary db, summary, name, sha, commit
    commit ||= {}
    author_name = commit[:author_name]
    author_email = commit[:author_email]
    author_when = commit[:author_when];

    ret = db.execute(
      "INSERT INTO file_stats_summary (sha, tag, author_name, author_email, author_when, code_lines, comment_lines, blank_lines)
       VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
      [sha,
       name,
       author_name,
       author_email,
       author_when,
       summary[:code_lines],
       summary[:comment_lines],
       summary[:blank_lines]
      ])
  end

  db = create_database "commits.db"

  db.transaction
  head = `(cd #{ENV['REPO_WORK_DIR']};git rev-parse HEAD)`.chomp
  summary = import_cloc_output db, head
  add_summary db, summary, "HEAD", head, find_commit( db, head, head )

  db.execute( "select sha, name, object from tags" ) do |row|
    sha = row[0]
    name = row[1]
    object = row[2]
    summary = import_cloc_output db, sha
    add_summary db, summary, name, sha, find_commit( db, sha, object );
  end
  db.commit
#+end_src

** Code language line counts

Here we can look at a project and see how many files are in each
language, the numebr of code lines, and the number of comments.

As a basic number I'm not sure that the number of lines means that
much but the change over time conveys some sort of information.

#+begin_src sqlite :colnames yes
  select
    language,
    count(filename) as files,
    sum(file_stats.code_lines) as code_lines,
    sum(file_stats.comment_lines) as comment_lines
  from file_stats, file_stats_summary
  where file_stats.sha = file_stats_summary.sha
    and file_stats_summary.tag = 'HEAD'
  group by language
  order by code_lines desc;
#+end_src

#+RESULTS:
#+ATTR_HTML: :class table table-striped
| language     | files | code_lines | comment_lines |
|--------------+-------+------------+---------------|
| Ruby         |    55 |       4323 |           883 |
| Bourne Shell |    37 |        992 |           461 |
| Markdown     |     7 |        516 |             0 |
| Perl         |     1 |         65 |            30 |
| YAML         |     2 |         46 |            10 |

** Seeing code size changes over time

#+begin_src sqlite :colnames yes
    select tag, author_name, date(author_when), code_lines, comment_lines, blank_lines
    from file_stats_summary;
#+end_src

#+RESULTS:
#+ATTR_HTML: :class table table-striped
| tag         | author_name      | date(author_when) | code_lines | comment_lines | blank_lines |
|-------------+------------------+-------------------+------------+---------------+-------------|
| HEAD        | yancyribbens     |        2021-03-27 |       5942 |          1384 |        1642 |
| v1.8.1      | James Couball    |        2020-12-31 |       5913 |          1383 |        1635 |
| v1.8.0      | James Couball    |        2020-12-31 |       5911 |          1383 |        1633 |
| v1.7.0      | James Couball    |        2020-04-25 |       5134 |          1012 |        1465 |
| v1.6.0.pre1 |                  |                   |       5023 |           994 |        1428 |
| v1.6.0      | James Couball    |        2020-02-02 |       5109 |           994 |        1455 |
| v1.5.0      | Per Lundberg     |        2018-08-10 |       4456 |           778 |        1286 |
| v1.4.0      | Per Lundberg     |        2018-05-16 |       4227 |           769 |        1198 |
| v1.3.0      | Roberto Decurnex |        2016-02-25 |       4099 |           703 |        1177 |
| v1.2.10     | Roberto Decurnex |        2016-02-25 |       4107 |           703 |        1177 |
| v1.2.9.1    | Roberto Decurnex |        2015-01-15 |       4056 |           703 |        1170 |
| v1.2.9      | Roberto Decurnex |        2015-01-12 |       4048 |           703 |        1165 |
| v1.2.8      | Roberto Decurnex |        2014-07-31 |       3759 |           628 |        1077 |
| v1.2.7      | robertodecurnex  |        2014-06-09 |       3757 |           629 |        1076 |
| v1.2.6      | robertodecurnex  |        2013-08-17 |       4236 |           651 |        1138 |
| v1.2.5      | Joshua Nichols   |        2009-10-17 |       3801 |           563 |         941 |
| v1.2.4      | Joshua Nichols   |        2009-10-02 |       3801 |           563 |         941 |
| v1.2.3      | Joshua Nichols   |        2009-09-30 |       3801 |           563 |         941 |
| v1.2.2      | Joshua Nichols   |        2009-08-02 |       3820 |           563 |         945 |
| v1.2.1      | Joshua Nichols   |        2009-08-01 |       3820 |           563 |         944 |
| v1.2.0      | Joshua Nichols   |        2009-08-01 |       3813 |           563 |         941 |
| v1.0.7      | Scott Chacon     |        2008-05-27 |      15802 |           666 |        3532 |
| 1.0.5.1     | Scott Chacon     |        2008-03-23 |      15724 |           660 |        3514 |
| 1.0.5       | Joshua Peek      |        2008-03-15 |      15719 |           665 |        3515 |
| 1.0.3       | scott Chacon     |        2007-11-16 |      13817 |           613 |        3183 |

We can see that a while bunch of code was removed between 2008-2009 (I
looked, it was the camping front end!) and overall the number of
comments in the codeback jumped in =v1.8.0= so that implies a bit of
difference on development styles.

* Producing a timeline

Let's also produce a summary timeline of what is going on with the
project.  We can track:

#+ATTR_HTML :class table table-striped
| When a project starts            | First commit                             |
| When a contributor first appears | First commit by author                   |
| When a contributor leaves        | Last commit by author                    |
| Is a contributor active?         | Commit with in time period, say 3 months |
| Releases                         | Tag creation                             |
| Major release                    | Semvar change                            |
| Minor release                    | Semvar change                            |
| Patch release                    | Semvar change                            |

Another thing to look at is the state of knowledge of the project.  We
will assume that working knowledge of a file will slowly decay, and so
if a file hasn't recently been touched by a person who is active on a
project, then the working knowledge of that file, why certain
trade-offs were made, etc has been lost and /archeology will occur/.

| Stale knowledge    | No contributors who touched a file are active |
| Regained knowledge | Contribution to a forgotten file              |

#+begin_src ruby :tangle 4timeline.rb
  require 'sqlite3'

  def create_database filename
    db = SQLite3::Database.new filename

    rows = db.execute <<-SQL1
         CREATE TABLE IF NOT EXISTS timeline (
                event_at DATETIME,
                event_verb TEXT,
                event_author TEXT,
                event_subject TEXT,
                concurrent_contributors INTEGER,
                commits INTEGER,
                entities_changed INTEGER
                );
  SQL1
    rows = db.execute( "DELETE FROM timeline;" );
    return db;
  end

  def concurrent_contribs db, at
    return db.execute( "select count(*) from authors where earliest <= (?) and date(latest,'+90 days') >= (?)", [at, at]).first
  end

  def add_event db, at, verb, author, subject
    concurrent = concurrent_contribs db, at

    commits = db.execute( "select count(*) from commits where author_email = (?)", [author] ).first
    entities_changed = db.execute( "select count(distinct(name)) from commits, commit_files where commits.id = commit_files.id and author_email = (?)", [author]).first

    db.execute( "INSERT INTO timeline (event_at, event_verb, event_author, event_subject, concurrent_contributors, commits, entities_changed)
    VALUES (?, ?, ?, ?, ?, ?, ?)",
                [at, verb, author, subject, concurrent, commits, entities_changed] );
  end

  def project_start_stop db
    row = db.execute( "select author_name, author_email, author_when from commits order by author_when asc limit 1" ).first

    add_event db, row[2], "project.start", row[1], "#{row[0]} made first commit"

    row = db.execute( "select author_name, author_email, author_when from commits order by author_when desc limit 1" ).first

    add_event db, row[2], "project.mostrecent", row[1], "#{row[0]} made most recent"
  end

  def contributors db
    # Look through all the authors to add when the started and stopped.
    rows= db.execute( "select email, name, earliest, latest from authors" )
    rows.each do |row|
      if row[2] != row[3]
        add_event db, row[2], "contrib.start", row[0], row[1]
        # only add latest if it was 45 at least 45 days ago
        add_event db, row[3], "contrib.latest", row[0], row[1]
      end
    end
  end

  def releases db
    db.execute( "
    select tag,
    count(distinct(commits.author_email)) as contributors,
    count(*) as commits,
    count(distinct(commit_files.name)) as entities,
    tags.name,
    tags.author_email,
    max(author_when)
    from commits, commit_files
    left join tags on tags.name = commits.tag
    where commits.id = commit_files.id 
    group by tag
    order by max(author_when)
  " ).each do |row|
      tag, contributors, commits, entities, name, author_email, author_when = row

      db.execute( "INSERT INTO timeline 
  (event_at, event_verb, event_author, event_subject, concurrent_contributors, entities_changed, commits)
  VALUES
  (?, ?, ?, ?, ?, ?, ?)",
                  [author_when, 'project.release', author_email, tag, contributors, entities, commits] )
    end
  end

  db = create_database "commits.db"
  db.transaction

  project_start_stop db
  contributors db
  releases db

  db.commit
#+end_src


#+begin_src sqlite :colnames yes
  select tag,
  count(distinct(commits.author_email)) as contributors,
  count(*) as commits,
  count(distinct(commit_files.name)) as entities,
  tags.name,
  tags.author_email,
  max(author_when)
  from commits, commit_files
  left join tags on tags.name = commits.tag
  where commits.id = commit_files.id 
  group by tag
  order by max(author_when)
#+end_src


#+begin_src sqlite :colnames yes
select * from timeline  order by event_at desc limit 100
#+end_src


* References

1. https://git-scm.com/docs/git-log
1. https://stackoverflow.com/questions/13208734/get-the-time-and-date-of-git-tags
1. https://pragprog.com/book/atcrime/your-code-as-a-crime-scene
2. http://www.adamtornhill.com/code/codemaat.htm
3. https://github.com/adamtornhill/code-maat

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
