#+title: NextJS with Prisma on Kubernetes
#+subtitle: deploy as a knative service
#+tags[]: nextjs, javascript, prisma, knative, kubernetes
#+date: 2021-12-08
#+aliases[]: /articles/2021/next_js_with_prisma

Now that we have our cluster up and running, lets look at how to build
and deploy a [[https://nextjs.org/][NextJS]] app on it, including the database.

* Create a NextJS app

We'll scaffold out a TypeScript app.
#+begin_src bash
  npx create-next-app@latest --typescript  myapp 

  cd myapp

  npm run dev
#+end_src

* Fireup a local data

#+begin_src bash
  docker run -e POSTGRES_PASSWORD=awesome_password -p 5432:5432 postgres 
#+end_src

* Install =prisma=

We'll add the npm packages to our project.

#+begin_src bash 
  npm install prisma

  npx prisma init
#+end_src

Edit =.env= and change the url to be

#+begin_src bash
  DATABASE_URL="postgresql://postgres:awesome_password@localhost:5432/mydb?schema=public"
#+end_src

** Data Models

In =primsa/schema.prisma= add a model:

#+begin_src 
model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String   @db.VarChar(255)
  content   String?
}
#+end_src

** Run the migration

#+begin_src bash
  npx prisma migrate dev --name init
#+end_src

** Run =prisma studio= to check it out

#+begin_src bash
  npx prisma studio
#+end_src

* Write the post page and api

This is a basic demostration, so nothing fancy.

** =tsconfig.json=

Add

="baseUrl" : "."= and ="strict":"false"= to =compilerOptions=.

** =lib/prisma.ts=

#+begin_src typescript :tangle prisma.ts
  import { PrismaClient } from '@prisma/client';

  declare global {
    var prisma: PrismaClient | undefined;
  }

  export const prisma = global.prisma || new PrismaClient();

  if (process.env.NODE_ENV !== 'production') global.prisma = prisma;
#+end_src

** =pages/posts.ts=

We'll use =react-hook-form= to make things simplier.

#+begin_src bash
  npm install react-hook-form
#+end_src

A couple points.

1. We query the database in =getServiceSideProps=
2. We are fetching our API from =window.location.origin=
3. We are totally hacking the window reload, I'm just lazy

#+begin_src typescript :tangle posts.ts
  import Head from 'next/head';
  import { prisma } from 'lib/prisma';
  import { Post } from '.prisma/client';
  import Link from 'next/link';
  import { useForm } from 'react-hook-form';

  export default function PostsPage({ posts }) {
    const {
      register,
      handleSubmit,
      formState: { errors, isSubmitted },
    } = useForm();

    const onSubmit = (data) => {
      try {
        fetch(`${window.location.origin}/api/create`, {
          body: JSON.stringify(data),
          headers: {
            'Content-Type': 'application/json',
          },
          method: 'POST',
        }).then( () => {
          window.location.href = window.location.href
         } )
      } catch (error) {
        throw new Error(error);
      }
    };

      return (
        <>
          <ul>
              {posts.map((item: Post) => (
                  <li key={item.id}>{item.title} - {item.content}</li>
              ))}
          </ul>
          <form onSubmit={handleSubmit(onSubmit)}>
            <label>Title</label>
            <input 
              id="title"
              type="text" 
              {...register('title', {required: true})}/>
              <br/>
            <label>Content</label>
            <input 
              type="text" 
              id="content"
              {...register('content', {required: true})}/>
            <input type="submit"/>
          </form>
          </>
      );
  }

  export const getServerSideProps = async () => {
    const posts = await prisma.post.findMany({
      select: {
        id: true,
        title: true,
        content: true
      },
    });

    console.log(posts);
    return {
      props: {
        posts,
      },
    };
  };

#+end_src

** =api/create.ts=

This is the api request to handle the post.  It runs on the server.

#+begin_src typescript :tangle create.ts
import { prisma } from 'lib/prisma';

export default async function handler(req, res) {
  const { content, title } = req.body;

  try {
    const feedback = await prisma.post.create({
      data: {
        content,
        title,
      },
    });
    res.status(200).json(feedback);
  } catch (error) {
    res.status(400).json({
      message: `Something went wrong :/ ${error}`,
    });
  }
}
#+end_src

* Setup =postgres= on your cluster

#+begin_src bash :results output
  helm repo add bitnami https://charts.bitnami.com/bitnami
  helm upgrade --install postgres bitnami/postgresql
#+end_src

Eventually the database will be available on =postgres-postgresql.default.svc.cluster.local=

We can get the password using

#+begin_src bash :results output
  kubectl get secret --namespace default postgres-postgresql -o jsonpath="{.data.postgresql-password}" | base64 --decode
#+end_src

When we deploy the function we'll set the =DATABASE_URL= to look something like:

#+begin_src bash
  DATABASE_URL="postgresql://postgres:1oOFIcOvB1@postgres-postgresql.default.svc.cluster.local:5432/database?schema=public"
#+end_src

You'll need to update that with your actual password of course.

** Migrate the database

We are going to setup the database from our local enviornment.  We'll
use =kubectl= to forward the local postgres port to the remote install.
/Remember to stop your local postgres container/


#+begin_src bash :results output
  kubectl port-forward svc/postgres-postgresql 5432:5432
#+end_src

Then, using the password that we found above, deploy the current
migrations to the postgres that's being forwared on localhost.  This
is a different url then the previous one shown!:

#+begin_src bash :results output
  DATABASE_URL="postgresql://postgres:1oOFIcOvB1@localhost:5432/database?schema=public" \
              npx prisma migrate deploy
#+end_src

You can also run =prisma studio= that way, by the way.

* Deploy the service
** Build image

We need to tweaks the dockerfile [[https://nextjs.org/docs/deployment][from the official docs]] to add =prisma
generate= to get the client code.  So, copy over that =Dockerfile= and
then, right after it copies the =node_modules= over added

=RUN npx prisma generate=

For me it's on like 14, right before =yarn build=.

Since I'm working off an M1 mac, I need to set the =--platform= to make
sure that the image is built using the correct binaries.  An example
of this is:

#+begin_src bash
  docker build . --platform linux/amd64 -t wschenk/prismatest && docker push wschenk/prismatest
#+end_src

** Create the service

#+begin_src bash :results output
    kn service create prisma \
       --image wschenk/prismatest \
       --env DATABASE_URL="postgresql://postgres:1oOFIcOvB1@postgres-postgresql.default.svc.cluster.local:5432/database?schema=public"
#+end_src

Once this is up and running, you should be able to interact with your
service and add messages.



* References

1. https://github.com/m-abdelwahab/nextjs-prisma-workshop
2. https://nextjs.org/docs/deployment
      
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
