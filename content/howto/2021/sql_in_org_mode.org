#+title: SQL in Org-Mode
#+subtitle: Everything in org-mode
#+tags[]: emacs sql org-mode
#+date: 2021-04-17
#+aliases[]: /articles/2021/sql_in_org_mode
#+PROPERTY: header-args :db test-sqlite.db

I do a lot of sql, and I do a lot of org-mode.  Lets put them
together.

* Native SQLite

In =org-babel-load-languages= turn on =sqlite=.  (You can use =customize=
for this if you don't have another method in use.)

Then you have a source block that looks like

#+begin_src org
  _#+begin_src sqlite :db test.db :colnames yes
  create table if not exists  greeting(one varchar(10), two varchar(10));
  insert into greeting values( 'Hello', 'world!');
  select * from greeting;
  _#+end_src
#+end_src

/(Remove the =_= if you are copy and pasting.)/

And that will print out

#+attr_html: :class d-none
#+begin_src sqlite :colnames yes
  create table if not exists  greeting(one varchar(10), two varchar(10));
  insert into greeting values( 'Hello', 'world!');
  select * from greeting;
#+end_src

#+RESULTS:
| one   | two    |
|-------+--------|
| Hello | world! |

You can also set the =:db= property globally in your org file with:

#+begin_src org
#+PROPERTY: header-args :db test-sqlite.db
#+end_src

And then reload the file.

* =org-sql-mode=

Install =ob-sql-mode= using the normal methods. This will use =sql-mode=
to run queries, which lets you use other databases than sqlite3.

#+begin_src elisp
  (use-package ob-sql-mode
    :ensure t)
#+end_src

#+RESULTS:

In =org-babel-load-languages= turn on =sql=.

And then you can run queries like so:

#+begin_src org
  _#+begin_src sql-mode :product postgres
    select * from commits;
  _#+end_src
#+end_src

There's more to it but that gives you the rough idea!

* References

1. https://www.reddit.com/r/emacs/comments/bb5mnv/sql_workflows_inside_emacs_anyone_have_a_nice/
2. https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sqlite.html
3. https://github.com/nikclayton/ob-sql-mode
4. https://orgmode.org/manual/Using-Header-Arguments.html#Using-header-arguments
