#+title: Playing with NFTs
#+subtitle: lets see what the full is about
#+tags[]: web3
#+date: 2022-05-26
#+draft: true

In this post we are going to go from having a coinbase account with
ETH in it, [[https://academy.moralis.io/blog/what-is-a-blockchain-wallet-the-complete-guide?utm_source=blog&utm_medium=post&utm_campaign=NFT%2520Deep-Dive%2520-%2520What%2520is%2520Foundation%253F][setting up a wallet]], buying an NFT on Opensea, and then
building a Web3 application that will be able to view the NFT.

* Setting up coinbase wallet

First I assume you have a coinbase account with ETH in it.  If not, go
ahead and do that.

We are basically going to follow the [[https://www.coinbase.com/learn/tips-and-tutorials/how-to-set-up-a-crypto-wallet][how to setup a coinbase crypto
wallet tutorial]].

** On your computer:

1. [[https://www.coinbase.com/wallet][Download the Coinbase Wallet]]
2. Add it to chrome
3. Create a new wallet
4. Add a username
5. *Backup your recovery phase somewhere else secure*
6. Add an awesome password

**  On your phone:

1. Search coinbase wallet on your favorite app store
2. Select you already have an account
3. Restore from recovery phrase
4. Add authentication
6. Go to settings
7. Connect to coinbase base account

** Transfer ETH from coinbase to your hosted wallet

We are going to follow the [[https://help.coinbase.com/en/wallet/sending-and-receiving/how-do-i-move-assets-between-my-coinbase-wallet-and-my-coinbase][instructions from coinbase]] on how to do
this between linked accounts.

On the mobile app, go to Settings.  Then select /buy or transfer/ from
the linked coinbase account.  I moved =$100= of ETH over, which cost me
=$3.72= in fees.

/Note that I needed to enter in my 2FA that I had originally setup for
my coinbase account/.

Now you wait, to see how long it takes Etherum to clear the
transaction.  It took roughly 2 minutes for ETH to show up as being
moved.

My main coinbase account shows that =$103.33= moved out of the account
and by wallet shows that I have balance of =$99.69=, which is a
difference of =$3.64=.

** Now you have a wallet

Both on your phone and your computer.  This is the same private key on
both, so you should be able to access the network from both devices
with the same identity.

* Getting a =.eth= name

* Building a web3 applications

#+begin_src bash
npx create-next-app@latest --typescript web3-demo
cd web3-demo
#+end_src

** Add Chain component

Here we are going to setup a very simple set of chain information to
tell what we want to connect to.  This is in =components/Chain.tsx=

#+begin_src typescript :tangle Chain.tsx
  interface BasicChainInformation {
    urls: string[];
    name: string;
  }

  export const CHAINS: { [chainId: number]: BasicChainInformation } = {
    1: {
      urls: ["https://cloudflare-eth.com"].filter((url) => url !== undefined),
      name: "Mainnet",
    },
  };

  export const URLS: { [chainId: number]: string[] } = Object.keys(
    CHAINS
  ).reduce<{ [chainId: number]: string[] }>((accumulator, chainId) => {
    const validURLs: string[] = CHAINS[Number(chainId)].urls;

    if (validURLs.length) {
      accumulator[Number(chainId)] = validURLs;
    }

    return accumulator;
  }, {});

  // @ts-ignore
  export default function Chain({ chainId }) {
    const name = chainId ? CHAINS[chainId]?.name : undefined;

    return <>{name}</>;
  }
#+end_src
** Add Network Status
#+begin_src bash
  npm i @web3-react/core@8.0.30-beta.0 \
      @web3-react/network@8.0.23-beta.0
#+end_src

#+begin_src bash
  mkdir components
#+end_src

In =components/NetworkStatus.tsx=

#+begin_src typescript :tangle NetworkStatus.tsx
  import styles from "../styles/Home.module.css";
  import { initializeConnector } from "@web3-react/core";
  import { Network } from "@web3-react/network";
  import { useEffect } from "react";
  import Chain, { URLS } from "./Chain";

  export const [network, hooks] = initializeConnector<Network>(
    (actions) => new Network(actions, URLS),
    Object.keys(URLS).map((chainId) => Number(chainId))
  );

  const {
    useChainId,
    useAccounts,
    useError,
    useIsActivating,
    useIsActive,
    useProvider,
    useENSNames,
  } = hooks;

  export default function NetworkStatus() {
    const chainId = useChainId();
    const accounts = useAccounts();
    const error = useError();
    const isActivating = useIsActivating();

    const isActive = useIsActive();

    const provider = useProvider();
    const ENSNames = useENSNames(provider);

    // console.log("ensnames network", ENSNames);

    // attempt to connect eagerly on mount
    useEffect(() => {
      void network.activate();
    }, []);

    return (
      <div className={styles.card}>
        <h2>Network Status</h2>

        <table>
          <tbody>
            <tr>
              <th>Chain</th>
              <td>
                <Chain chainId={chainId} />
              </td>
            </tr>
            <tr>
              <th>Accounts</th>
              <td>{accounts}</td>
            </tr>
            <tr>
              <th>isActivating</th>
              <td>{isActivating ? "true" : "false"}</td>
            </tr>
            <tr>
              <th>isActive</th>
              <td>{isActive ? "true" : "false"}</td>
            </tr>
          </tbody>
        </table>
      </div>
    );
  }
#+end_src

** Coinbase Wallet Connect

#+begin_src bash
  npm i @web3-react/coinbase-wallet@8.0.31-beta.0 \
      @coinbase/wallet-sdk@3.0.4 \
      @ethersproject/units@5.6.0 
#+end_src

=components/CoinbaseWalletCard.tsx=:

#+begin_src typescript :tangle CoinbaseWalletCard.tsx
  import styles from "../styles/Home.module.css";
  import { CoinbaseWallet } from "@web3-react/coinbase-wallet";
  import { initializeConnector } from "@web3-react/core";
  import { useEffect, useState } from "react";
  import Chain, { URLS } from "./Chain";
  import type { BigNumber } from "@ethersproject/bignumber";
  import { formatUnits } from "@ethersproject/units";

  export const [coinbaseWallet, hooks] = initializeConnector<CoinbaseWallet>(
    (actions) =>
      new CoinbaseWallet(actions, {
        url: URLS[1][0],
        appName: "web3-react",
      })
  );

  const {
    useChainId,
    useAccounts,
    useError,
    useIsActivating,
    useIsActive,
    useProvider,
    useENSNames,
  } = hooks;

  export default function CoinbaseWalletCard() {
    const chainId = useChainId();
    const accounts = useAccounts();
    const error = useError();
    const isActivating = useIsActivating();

    const isActive = useIsActive();

    const provider = useProvider();
    const ENSNames = useENSNames(provider);

    // attempt to connect eagerly on mount
    useEffect(() => {
      void coinbaseWallet.connectEagerly();
    }, []);

    // Balance

    const [balances, setBalances] = useState<BigNumber[] | undefined>(undefined);

    useEffect(() => {
      if (provider && accounts) {
        void Promise.all(
          accounts.map((account) => provider.getBalance(account))
        ).then((balances) => {
          // if (stale) return
          setBalances(balances);
        });
      }
    }, [provider, accounts]);

    return (
      <div className={styles.card}>
        <h2>Coinbase Wallet</h2>
        <table>
          <tbody>
            <tr>
              <th>Chain</th>
              <td>
                <Chain chainId={chainId} />
              </td>
            </tr>
            <tr>
              <th>Accounts</th>
              <td>{accounts}</td>
            </tr>
            <tr>
              <th>isActivating</th>
              <td>{isActivating ? "true" : "false"}</td>
            </tr>
            <tr>
              <th>isActive</th>
              <td>{isActive ? "true" : "false"}</td>
            </tr>

            <tr>
              <th>ENS Names</th>
              <td>{ENSNames}</td>
            </tr>

            {balances &&
              accounts &&
              accounts?.map((account, i) => (
                <tr key={account}>
                  <th>Account {i}</th>
                  <td>{formatUnits(balances[i], 18)}</td>
                </tr>
              ))}
          </tbody>
        </table>

        {!isActive && !isActivating && (
          <button onClick={() => coinbaseWallet.activate()}>Connect</button>
        )}

        {isActive && !isActivating && (
          <button onClick={() => coinbaseWallet.deactivate()}>Disconnect</button>
        )}
      </div>
    );
  }

#+end_src


* Running a smart contract

#+begin_src bash
npm i ethers
#+end_src


#+begin_src bash
  curl -o ens.abi 'http://api.etherscan.io/api?module=contract&action=getabi&address=0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85&format=raw'
#+end_src

* Signing up for etherscan

[[https://etherscan.io/register][Register for an account.]]

#+begin_src bash
npm i @defifofum/etherscan-sdk dotenv axios

#+end_src
* Connecting on opensea

Now go to [[https://opensea.io/][opensea]] and connect your wallet by selecting the wallet icon
on the top right.  You should get a popup on the from the coinbase
wallet extension asking you to grant permission.

Now opensea should be able to see your balance.





   


* References

1. [[https://academy.moralis.io/blog/what-is-a-blockchain-wallet-the-complete-guide?utm_source=blog&utm_medium=post&utm_campaign=NFT%2520Deep-Dive%2520-%2520What%2520is%2520Foundation%253F][What is a blockchain wallet?]] moralis.io
1. [[https://www.coinbase.com/learn/tips-and-tutorials/how-to-set-up-a-crypto-wallet][How to set up a crypto wallet]] coinbase
1. [[https://opensea.io/]]
   
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
