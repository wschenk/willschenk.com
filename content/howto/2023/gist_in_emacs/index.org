#+title: gist in emacs
#+subtitle: why not?
#+tags[]: emacs, github, gists
#+date: 2023-07-24T18:04:48
#+draft: true

1. Go to [[https://github.com/settings/tokens]] and create a new token
2. Give it the gist scope
3. Set up you git config:
   
#+begin_src bash
git config --global github.user <your-github-user-name>
git config --global github.oauth-token <your-personal-access-token-with-gist-scope>
#+end_src

#+begin_src elisp
  (use-package gist :ensure t)
#+end_src

Some nice features

| =M-x gist-list=      | list out all of your gists     |
| =M-x gist-list-user= | lists gists for a certain user |
| =M-x gist-buffer=    | create a gist with this buffer |




* Using =gh= directly

One thing I'd like to do is to see all of the starred repos that I
have on github.  Let's look at how to do that.

#+begin_src elisp :tangle gh-browser.el
  (require 'gh)
  (require 'gh-repos)
  (require 'gh-cache)

  (defun starred-gh-repos-get-api ()
    (gh-repos-api "api" :sync t :num-retries 1 :cache (gh-cache "cache")))

  (defun showstarred ()
    (interactive)
    (let* ((bufname "*starredrepos*")
           (api (starred-gh-repos-get-api))
           (response (gh-repos-starred-list api)))
      (switch-to-buffer bufname)
      (message response)))

  (get-buffer "*starred*")

  (showstarred)

  (defmethod ghjn-repos-starred-list ((api gh-repos-api) &optional username)
    (gh-api-authenticated-request
     api (gh-object-list-reader (oref api repo-cls)) "GET"
     (format "/users/%s/starred" (or username (gh-api-get-username api)))))

  (defun gist-get-api (&optional sync)
    (let ((gh-profile-current-profile
           (or gh-profile-current-profile (gh-profile-completing-read))))
      (make-instance 'gh-gist-api :sync sync :cache t :num-retries 1)))

#+end_src

#+begin_src elisp
  (starred-gh-repos-get-api)


#+end_src
#+begin_src elisp
(gh-repos-starred-list (gh-api))
#+end_src


* References

1. https://www.gnu.org/software/emacs/manual/html_node/elisp/Tabulated-List-Mode.html
1. https://vallyscode.github.io/posts/tabulated-list-mode/
1. https://www.reddit.com/r/emacs/comments/8vno3i/how_to_create_a_magit_style_interface/
   
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
