#+title: ChatGPT coding example
#+date: 2024-07-24T21:21:36
#+draft: true

I did an export of my Tezlab data, both drives and charges, and then
attached them and prompted GTP with:

* Prompt 1

#+begin_quote
Attached are 2 csv files.  I would like to write a ruby sinatra app
that loads the files into a sqlite database and provides a web json
api that will let me query data about them.  I want to ask it things
like "how many miles did I drive on a certain day", "which day did I
drive the longest or shortest", "how efficient was my driving for each
month", "did I do any long road trips (by looking at the start and end
of the drive)", "what days did I charge the most". How would you go
about breaking down that problem?  can you start by looking at the csv
and suggesting what the data model should look like?
#+end_quote

It then gave me some stuff.  Lets follow along:

#+begin_src bash
  bundle init
  bundle add sinatra sinatra-activerecord sqlite3 json
#+end_src

Which gives:

#+begin_src ruby :tangle Gemfile
  source "https://rubygems.org"

  gem "sinatra", "~> 4.0"
  gem "sinatra-activerecord", "~> 2.0"
  gem "sqlite3", "~> 2.0"
  gem "json", "~> 2.7"
  gem "rake", "~> 13.2"
#+end_src


#+begin_src ruby :tangle app.rb
# app.rb
require 'sinatra'
require 'sinatra/activerecord'
require 'sqlite3'
require 'json'

set :database, {adapter: "sqlite3", database: "db/development.sqlite3"}

class Trip < ActiveRecord::Base
end

get '/trips' do
  Trip.all.to_json
end
#+end_src


#+begin_src ruby :tangle db/migrate/001_create_trips.rb
  # db/migrate/001_create_trips.rb
  class CreateTrips < ActiveRecord::Migration[6.0]
    def change
      create_table :trips do |t|
        t.string :vehicle_name
        t.string :vin
        t.string :timezone
        t.datetime :start_time
        t.datetime :end_time
        t.float :odometer_start
        t.float :odometer_end
        t.float :energy_drawn_kwh
        t.float :charge_energy_added_kwh
        t.float :start_range
        t.float :end_range
        t.float :duration
        t.string :location_start
        t.string :location_end
        t.string :coordinate_start
        t.string :coordinate_end
        t.float :cost_usd
        t.float :temperature
        t.float :co2
        t.float :gco2_kwh
        t.float :eq_fuel_burn_gal
        t.float :start_soc
        t.float :end_soc
      end
    end
  end

#+end_src


#+begin_src ruby :tangle db/seeds.rb
  # db/seeds.rb
  require 'csv'

  CSV.foreach('path_to_csv_file.csv', headers: true) do |row|
    Trip.create(
      vehicle_name: row['Vehicle Name'],
      vin: row['VIN'],
      timezone: row['Timezone'],
      start_time: "#{row['Start Date']} #{row['Start Time']}",
      end_time: "#{row['End Date']} #{row['End Time']}",
      odometer_start: row['Odometer Start'].to_f,
      odometer_end: row['Odometer End'].to_f,
      energy_drawn_kwh: row['Energy Drawn (kWh)'].to_f,
      charge_energy_added_kwh: row['Charge Energy Added (kWh)'].to_f,
      start_range: row['Start Range ()'].to_f,
      end_range: row['End Range ()'].to_f,
      duration: row['Duration'].to_f,
      location_start: row['Location Start'],
      location_end: row['Location End'],
      coordinate_start: row['Coordinate Start'],
      coordinate_end: row['Coordinate End'],
      cost_usd: row['Cost (USD)'].to_f,
      temperature: row['Temperature ()'].to_f,
      co2: row['CO2 (g)'].to_f,
      gco2_kwh: row['gCO2/kWh'].to_f,
      eq_fuel_burn_gal: row['Eq. Fuel Burn (gal)'].to_f,
      start_soc: row['Start SOC (%)'].to_f,
      end_soc: row['End SOC (%)'].to_f
    )
  end

#+end_src

#+begin_src ruby :tangle app.rb
# app.rb (continued)
get '/miles_driven' do
  date = params['date']
  trips = Trip.where("DATE(start_time) = ?", date)
  total_miles = trips.sum("odometer_end - odometer_start")
  { date: date, total_miles: total_miles }.to_json
end

get '/longest_drive' do
  trip = Trip.order("odometer_end - odometer_start DESC").first
  { date: trip.start_time.to_date, miles: trip.odometer_end - trip.odometer_start }.to_json
end

# Implement other endpoints similarly...
#+end_src

* Prompt 2

#+begin_quote
what about the second csv file with the charging information, can you
model that out also?
#+end_quote

#+begin_src ruby :tangle app.rb
  # app.rb (continued)
  class Charge < ActiveRecord::Base
  end

  get '/charges' do
    Charge.all.to_json
  end
#+end_src

#+begin_src ruby :tangle db/migrate/002_create_charges.rb
  # db/migrate/002_create_charges.rb
  class CreateCharges < ActiveRecord::Migration[6.0]
    def change
      create_table :charges do |t|
        t.string :vehicle_name
        t.string :vin
        t.string :timezone
        t.datetime :start_time
        t.datetime :end_time
        t.float :charge_energy_added_kwh
        t.float :start_range
        t.float :end_range
        t.string :connector_type
        t.string :location
        t.string :coordinate
        t.float :cost_usd
        t.float :start_soc
        t.float :end_soc
      end
    end
  end

#+end_src

#+begin_src ruby :tangle db/seeds.rb
  # db/seeds.rb (continued)
  CSV.foreach('path_to_csv_file.csv', headers: true) do |row|
    Charge.create(
      vehicle_name: row['Vehicle Name'],
      vin: row['VIN'],
      timezone: row['Timezone'],
      start_time: "#{row['Start Date']} #{row['Start Time']}",
      end_time: "#{row['End Date']} #{row['End Time']}",
      charge_energy_added_kwh: row['Charge Energy Added (kWh)'].to_f,
      start_range: row['Start Range ()'].to_f,
      end_range: row['End Range ()'].to_f,
      connector_type: row['Connector Type'],
      location: row['Location'],
      coordinate: row['Coordinate'],
      cost_usd: row['Cost (USD)'].to_f,
      start_soc: row['Start SOC (%)'].to_f,
      end_soc: row['End SOC (%)'].to_f
    )
  end

#+end_src

#+begin_src ruby :tangle app.rb
  # app.rb (continued)
  get '/most_charged_days' do
    charges_by_day = Charge.group("DATE(start_time)").sum(:charge_energy_added_kwh)
    most_charged_days = charges_by_day.sort_by { |_date, kwh| -kwh }.first
    { date: most_charged_days[0], total_kwh: most_charged_days[1] }.to_json
  end

  # Implement other endpoints similarly...

#+end_src

* Prompt 3

#+begin_quote
what are other useful things to show about the driving data?  can you
give me some examples of queries that new electric vehicle drivers
would find interesting?
#+end_quote

#+begin_src ruby :tangle app.rb
  get '/average_energy_consumption' do
    total_miles = Trip.sum("odometer_end - odometer_start")
    total_energy = Trip.sum(:energy_drawn_kwh)
    average_consumption = total_energy / total_miles
    { average_energy_consumption_kwh_per_mile: average_consumption }.to_json
  end
#+end_src

#+begin_src ruby :tangle app.rb
  get '/monthly_driving_summary' do
  summary = Trip.group("strftime('%Y-%m', start_time)").select("strftime('%Y-%m', start_time) as month, sum(odometer_end - odometer_start) as total_miles, sum(energy_drawn_kwh) as total_energy").map do |record|
    {
      month: record.month,
      total_miles: record.total_miles,
      total_energy: record.total_energy,
      average_efficiency: record.total_energy / record.total_miles
    }
  end
  summary.to_json
end

#+end_src

#+begin_src ruby :tangle app.rb
  get '/trip_efficiency' do
    trips = Trip.all.map do |trip|
      {
        trip_id: trip.id,
        start_time: trip.start_time,
        end_time: trip.end_time,
        miles: trip.odometer_end - trip.odometer_start,
        energy_drawn: trip.energy_drawn_kwh,
        efficiency: trip.energy_drawn_kwh / (trip.odometer_end - trip.odometer_start)
      }
    end
    trips.to_json
  end
  
#+end_src

#+begin_src ruby :tangle app.rb
get '/longest_trips' do
  longest_trips = Trip.order("odometer_end - odometer_start DESC").limit(5).map do |trip|
    {
      trip_id: trip.id,
      start_time: trip.start_time,
      end_time: trip.end_time,
      miles: trip.odometer_end - trip.odometer_start,
      energy_drawn: trip.energy_drawn_kwh
    }
  end
  longest_trips.to_json
end
#+end_src

#+begin_src ruby :tangle app.rb
get '/charging_locations' do
  locations = Charge.select(:location).distinct.map do |charge|
    {
      location: charge.location,
      coordinate: charge.coordinate
    }
  end
  locations.to_json
end
#+end_src

#+begin_src ruby :tangle app.rb
get '/charging_sessions_summary' do
  summary = Charge.group("strftime('%Y-%m-%d', start_time)").select("strftime('%Y-%m-%d', start_time) as day, sum(charge_energy_added_kwh) as total_energy_added, sum(cost_usd) as total_cost").map do |record|
    {
      day: record.day,
      total_energy_added: record.total_energy_added,
      total_cost: record.total_cost
    }
  end
  summary.to_json
end
#+end_src

#+begin_src ruby :tangle app.rb
  get '/most_efficient_trips' do
  efficient_trips = Trip.where.not(energy_drawn_kwh: nil).order("(odometer_end - odometer_start) / energy_drawn_kwh DESC").limit(5).map do |trip|
    {
      trip_id: trip.id,
      start_time: trip.start_time,
      end_time: trip.end_time,
      miles: trip.odometer_end - trip.odometer_start,
      energy_drawn: trip.energy_drawn_kwh,
      efficiency: (trip.odometer_end - trip.odometer_start) / trip.energy_drawn_kwh
    }
  end
  efficient_trips.to_json
end

#+end_src

#+begin_src ruby :tangle app.rb
  get '/daily_driving_time' do
    time_summary = Trip.group("strftime('%Y-%m-%d', start_time)").select("strftime('%Y-%m-%d', start_time) as day, sum((julianday(end_time) - julianday(start_time)) * 24 * 60) as total_minutes").map do |record|
      {
        day: record.day,
        total_time_minutes: record.total_minutes
      }
    end
    time_summary.to_json
  end
#+end_src

* Prompt 4

#+begin_quote
how can you find out trip patterns?
#+end_quote

#+begin_src ruby :tangle app.rb
  get '/common_start_locations' do
    common_starts = Trip.group(:location_start).order('count_id DESC').count(:id).map do |location, count|
      { location: location, trips: count }
    end
    common_starts.to_json
  end

  get '/common_end_locations' do
    common_ends = Trip.group(:location_end).order('count_id DESC').count(:id).map do |location, count|
      { location: location, trips: count }
    end
    common_ends.to_json
  end
#+end_src

#+begin_src ruby :tangle app.rb
  get '/trips_by_time_of_day' do
    trips_by_time = Trip.group("strftime('%H', start_time)").order('count_id DESC').count(:id).map do |hour, count|
      { hour: hour, trips: count }
    end
    trips_by_time.to_json
  end
#+end_src

#+begin_src ruby :tangle app.rb
  get '/average_trip_length' do
    average_length = Trip.average("odometer_end - odometer_start")
    { average_trip_length: average_length }.to_json
  end
#+end_src

#+begin_src ruby :tangle app.rb
  get '/trip_length_distribution' do
    distribution = Trip.select("odometer_end - odometer_start as length").group(:length).order(:length).count(:id).map do |length, count|
      { length: length, trips: count }
    end
    distribution.to_json
  end

#+end_src

#+begin_src ruby :tangle app.rb
  get '/frequent_trips' do
    frequent_trips = Trip.select("location_start, location_end, count(*) as trip_count")
                       .group(:location_start, :location_end)
                       .order('trip_count DESC')
                       .limit(10)
                       .map do |trip|
      {
        start_location: trip.location_start,
        end_location: trip.location_end,
        trip_count: trip.trip_count
      }
    end
    frequent_trips.to_json
  end

#+end_src

#+begin_src ruby :tangle app.rb
  get '/daily_trip_patterns' do
  daily_patterns = Trip.group("strftime('%Y-%m-%d', start_time)").order('count_id DESC').count(:id).map do |date, count|
    { date: date, trips: count }
  end
  daily_patterns.to_json
end

get '/weekly_trip_patterns' do
  weekly_patterns = Trip.group("strftime('%Y-%W', start_time)").order('count_id DESC').count(:id).map do |week, count|
    { week: week, trips: count }
  end
  weekly_patterns.to_json
end

get '/monthly_trip_patterns' do
  monthly_patterns = Trip.group("strftime('%Y-%m', start_time)").order('count_id DESC').count(:id).map do |month, count|
    { month: month, trips: count }
  end
  monthly_patterns.to_json
end

#+end_src

#+begin_src ruby :tangle app.rb
  get '/trip_segments' do
    segments = {
      short_trips: Trip.where("odometer_end - odometer_start < ?", 10).count,
      medium_trips: Trip.where("odometer_end - odometer_start BETWEEN ? AND ?", 10, 50).count,
      long_trips: Trip.where("odometer_end - odometer_start > ?", 50).count
    }
    segments.to_json
  end

#+end_src

* Running

#+begin_src ruby :tangle Rakefile
  # Rakefile
  require "sinatra/activerecord/rake"
#+end_src

#+begin_src yaml :tangle config/database.yml
    development:
      adapter: sqlite3
      database: db/development.sqlite3
      pool: 5
      timeout: 5000
#+end_src

#+begin_src bash
  bundle add rake

#+end_src
* References
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
