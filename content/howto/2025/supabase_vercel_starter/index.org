#+title: Supabase Vercel Starter
#+subtitle: lets clone the world
#+tags[]: supabase vercel nextjs starter
#+date: 2025-02-08T07:01:22

I'm looking to build a bunch of apps, and am evaulating a bunch of the
start kits out there.  I know I want to use supabase and probably
NextJS, so lets look at the base one that vercel supplies.


* Preqs

Setup all the stuff on your machine if you don't have it.

#+begin_src bash
  which pnpm
#+end_src

If not found,  [[https://pnpm.io/installation][install pnpm]].

#+begin_src bash
  which docker
#+end_src

If not found, =brew install --cask docker=

#+begin_src bash
  which supabase
#+end_src

If not found, =brew install supabase/tap/supabase=

#+begin_src bash
  which cursor
#+end_src

If not found, =brew install --cask cursor=

* Setup the environment

#+begin_src bash
  pnpm create next-app --example with-supabase appname
  cursor .
#+end_src

Once this is open, create a =.vscode/tasks.json= file:


#+begin_src javascript
 {
    "version": "2.0.0",
    "tasks": [
      {
        "label": "dev",
        "type": "shell",
        "command": "pnpm run dev", // or your specific dev command
        "isBackground": true,
        "problemMatcher": [],
        "presentation": {
          "reveal": "always",
          "panel": "new"
        },
        "runOptions": {
          "runOn": "folderOpen"
        }
      }
    ]
  }
#+end_src

The =CMD-SHIFT-P=, =Run Tasks=, and select =dev= which you just created.

=CTRL-SHIFT-`= to create a new terminal.  Type

#+begin_src bash
  supabase init
#+end_src

And then

#+begin_src bash
  supabase start
#+end_src

This will take a while.

* Setup local =.env.development=

#+begin_src bash
  supabase status | \
      awk -F ": " '/API URL/ {print "NEXT_PUBLIC_SUPABASE_URL=" $2}' \
          >> .env.development

  supabase status | \
      awk -F ": " '/anon key/ {print "NEXT_PUBLIC_SUPABASE_ANON_KEY=" $2}' \
          >> .env.development

#+end_src


* Accounts

Go to the [[http://localhost:3000/sign-up][signup page]].

Create an account.

You will see you login details on the account page.

Go to the [[http://127.0.0.1:54323/project/default/auth/users][user page on the studio]] to see the new user account.

Go to the [[http://127.0.0.1:54324/][Inbox]] server to see the email that it sent.

* Testing real emails

Lets sign up with [[https://resend.com][resend]] because they give you a bunch of free emails,
and we don't need that much.

First get an API key, and put it in =.env.development=

#+begin_src bash
  RESEND_API_KEY=asdfasdf....

#+end_src

Go to =Settings= > =SMTP=

Inside of =supabase/config.toml=, find the =auth.email.smtp= section:

Change the outgoing email address to be something that resend will
sent from, for example your email.  I'm using the onboarding email
test but you can use whatever you have verified.

#+begin_src toml
  [auth.email.smtp]
  enabled = true
  host = "smtp.resend.com"
  port = 2465
  user = "resend"
  pass = "env(RESEND_API_KEY)"
  admin_email = "onboarding@resend.dev"
  sender_name = "Admin"
#+end_src

Everytime you make a change, be sure to

=supabase stop= and =supabase start=


* Test data

#+begin_src bash
  supabase migration new notes
#+end_src

And in the resultant file

#+begin_src sql
  create table notes (
    id bigserial primary key,
    title text
  );
#+end_src

And then in =seed.sql=:
#+begin_src sql
  insert into notes(title)
  values
    ('Today I created a Supabase project.'),
    ('I added some data and queried it from Next.js.'),
    ('It was awesome!');

#+end_src

Then

#+begin_src bash
  supabase db reset
#+end_src


* Deploy
** Supabase Database

Create a [[https://supabase.com/dashboard/projects][new supabase project]].

Save the password somewhere, like a password manager.  Then link your
local project to the main project:

#+begin_src bash
  supabase link
#+end_src

You'll need the database password.  Once the database is done being
created, push the schema over:

#+begin_src bash
  supabase db push
#+end_src

That will take a bit to load up.

** Supabase email

On the supabase side header, go to =Authentication=.  Select =Emails= and
then =SMTP Settings=.  Enter in your resend SMTP credentials

** Supabase environment variables

Go into =Connect= in the header, slide over to app frameworks, and copy
the =NEXT_PUBLIC_SUPABASE_URL= etc stuff to the clipboard.


** Deploy to vercel

#+begin_src bash
  gh repo create brokerscopre --private --source=. --remote=origin
#+end_src

#+begin_src bash
  git add .
  git commit -m "Import"
  git push origin main
#+end_src

Then go to [[https://vercel.com][vercel.com]] and create a new project, importing it from that
newly created repo.

Go to settings, environment, and then paste in the
=NEXT_PUBLIC_SUPABASE_URL= stuff in there.  Once it's added, then select
=Redeploy= to have the changes go public.

** Add supabase redirect urls

In the supabase dashboard,go into =Authentication= and then =Configuration=.

Change the siteurl to be your main url

Add in the redirect urls.

** Test

Create a user.

Forgot password.  Make sure that the redirectURL is working correctly.

** Email rate limiting

Be sure to up the liits of how many emails you can send, it defaults to 2.


* Conclusions

This is a good start kit.  The [[https://github.com/nextjs/saas-starter/tree/main][saas-starter]] also has a lot of
interesting code it it, but it does use supabase auth so it's less
interesting to me.

My biggest take away here is that it's worth it to start looking at
the commercial offerings.

* References

1. https://vercel.com/templates/next.js/supabase
1. https://supabase.com/docs/guides/getting-started/quickstarts/nextjs
1. https://resend.com/supabase
1. [[https://resend.com/blog/how-to-configure-supabase-to-send-emails-from-your-domain#configure-a-custom-smtp-server-manually][Configuring Supabase with Resend SMTP]]
1. https://supabase.com/docs/guides/functions/examples/auth-send-email-hook-react-email-resend
   
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
