#+title: Making an agent with LangChain
#+date: 2024-08-08T06:14:04
#+draft: true

#+begin_src bash
  npm i @langchain/community cheerio
#+end_src

Which gives us a =package.json= like:

#+begin_src javascript :tangle package.json
  {
    "type": "module",
    "dependencies": {
        "@langchain/community": "^0.2.25",
        "cheerio": "^1.0.0-rc.12"
        
    }
  }
#+end_src

* Secrets

You'll need:

#+begin_src bash :tangle secrets.env
  # secrets.env
  TAVILY_API_KEY=op://Personal/Tavily Key/notesPlain
  OPENAI_API_KEY=op://Personal/OpenAI Key/notesPlain
  LANGSMITH_API_KEY=op://Personal/LangSmith Key/notesPlain
#+end_src

And you can update it into the =.env= like so:

#+begin_src bash
  op inject -i secrets.env > .env
#+end_src

* Test Tavily Search

#+begin_src javascript :tangle search_test.js
  import { TavilySearchResults } from "@langchain/community/tools/tavily_search";
  import dotenv from "npm:dotenv";
  dotenv.config();

  const searchTool = new TavilySearchResults();

  const toolResult = await searchTool.invoke("what is the weather in SF?");

  console.log(toolResult);
#+end_src

Then test:

#+begin_src bash
  deno run -A search_test.js | jq .

#+end_src

* Op



* References

1. [[https://developer.1password.com/docs/cli/secrets-config-files/#optional-use-op-inject-in-production][secrets config]]
2. [[https://app.tavily.com/home][tavily dashboard]]
3. [[https://www.npmjs.com/package/@langchain/community][@langchain/community]]
4.
   
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
