#+title: Playing with openrouteservice-js
#+subtitle: learning about mapping
#+tags[]: leaflet openrouteservice openstreetmap
#+date: 2024-03-25T15:00:44

* Get an api key

Go to [[https://openrouteservice.org/dev/#/signup][signup page]] of openrouteservice, and accept the terms of
service.  I'm storing it in =apiKey.js=, as

#+begin_src javascript
  export default '5b3c...';
#+end_src

* Setting up leaflet

Lets start coding.  Lets first get a map that we can display.

{{< img img="map-view.png" fit="800x500 smart">}}

#+begin_src bash
  npm i leaflet vite
#+end_src

=map-view.js=:
#+begin_src javascript :tangle map-view.js
  import 'leaflet/dist/leaflet.css';
  import L from 'leaflet';

  class MapView extends HTMLElement {
      static get observedAttributes() {
          return ["latlon"];
      }
      
      connectedCallback() {
          this.insertAdjacentHTML( 'beforeend', '<div id="map" style="height:100%"></div>' );

          this.setLatLon();
          
          this.map = L.map('map', {
              center: [ this.lat, this.lon ],
              zoom: 11,
              zoomControl: true
          });

          L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
              maxZoom: 19,
              attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
          }).addTo(this.map);

          L.control.scale({
              imperial: true,
              maxWidth: 300
          }).addTo(this.map);

          this.setMarker();
      }

      setLatLon() {
          let latlon = this.getAttribute( 'latlon' ) || '41.84371,-73.32928';

          let s = latlon.split( "," );
          this.lat = s[0];
          this.lon = s[1];
          this.setMarker()
      }

      attributeChangedCallback( name ) {
          if( name == 'latlon' ) {
              this.setLatLon();
          }
      }

      setMarker() {
          if( this.map ) {
              this.map.setView( [this.lat, this.lon] );
              if( this.marker ) {
                  this.marker.remove();
              }

              this.marker = L.marker([this.lat, this.lon]).addTo(this.map);
          }
      }
  }

  customElements.define( 'map-view', MapView )
#+end_src

Which we can use with

=<map-view></map-view>=

#+begin_src html :tangle map-view.html :exports none
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>Map View</title>
      <script src="map-view.js" type="module"></script>
      <script src="https://cdn.tailwindcss.com"></script>

    </head>
    <body>
      <div class="w-full h-screen">
        <map-view></map-view>
      </div>
    </body>
  </html>
#+end_src

Which we can see by

#+begin_src bash
  npx vite
#+end_src

And then opening up [[http://localhost:5173/map-view.html]]


* Location lookup

Here we are going to use the =Geocode= api to lookup a place based upon
the name we enter.  We'll display the list of results and fire off an
event once the user selects something.

#+begin_src javascript :tangle location-lookup.js
  import Openrouteservice from 'openrouteservice-js'
  import apiKey from './apiKey.js'

  // So we don't do a zillion searches
  export function debounce(func, timeout = 500){
      let timer;
      return (...args) => {
          clearTimeout(timer);
          timer = setTimeout(() => { func.apply(this, args); }, timeout);
      };
  }

  const Geocode = new Openrouteservice.Geocode({
      api_key: apiKey
  })

  class LocationLookup extends HTMLElement {
      connectedCallback() {
          const text = this.getAttribute( 'prompt' ) || "Location Search";
          
          this.insertAdjacentHTML( 'beforeend', `
            <p>${text}</p>
            <form>
              <input
                type="text"
                id="location"
                placeholder="Location"
                class="border-2 rounded"/>
            </form>
            <ul>
            </ul>
  `);
          this.location = this.querySelector( 'input' );

          const processChange = debounce(() => this.lookupLocation());    
          this.location.addEventListener( 'keyup', processChange );

          this.results = this.querySelector( 'ul' );
          this.results.addEventListener( "click", this.fireEvent );
      }

      async lookupLocation() {
          this.results.innerHTML = `<li>Loading up ${location.value}</li>`
        
          const json = await Geocode.geocode( {text: this.location.value} )

          this.results.innerHTML = ""
          for( let i = 0; i < json.features.length; i++ ) {
              const feature = json.features[i];
              this.results.innerHTML +=
                  `<li><a
                         data-lat="${feature.geometry.coordinates[1]}"
                         data-lon="${feature.geometry.coordinates[0]}"
                         class="text-blue-700">${feature.properties.label}</a></li>`
          }
      }

      fireEvent( event ) {
          let location = event.target.dataset;
          const myevent = new CustomEvent("location", {
              bubbles: true,
              detail: location
          });
          this.dispatchEvent( myevent );
      }
  }

  customElements.define( 'location-lookup', LocationLookup )
#+end_src

We can combine this with the =map-view= component.  We'll add an event
listener and when the location is selected we will update the
attribute of the map, which will set the marker in the right place.

#+begin_src html :tangle location-lookup.html
  <html>
    <head>
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <script src="location-lookup.js" type="module"></script>
      <script src="map-view.js" type="module"></script>
      <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body>
      <div class="flex h-screen">
        <div class="w-64 p-4">
          <location-lookup id="from" prompt="Starting Location"></location-lookup>
        </div>
        <div id="map" class="w-full vh">
          <map-view></map-view>
        </div>
      </div>

      <script>
        const ll = document.getElementById( "from" )
        const mv = document.querySelector( "map-view" )

        ll.addEventListener( 'location', (e) => {
          const latlon = `${e.detail.lat},${e.detail.lon}`

          mv.setAttribute( "latlon", latlon );
        } );
        
      </script>
    </body>
  </html>
#+end_src

Check it: [[http://localhost:5173/location-lookup.html]]

* Route planning

Lets take a look at how to build a route planner.

{{< img img="find-route.png" fit="800x500 smart">}}


#+begin_src javascript :tangle find-route.js
  import Openrouteservice from 'openrouteservice-js'
  import apiKey from './apiKey.js'

  const Directions = new Openrouteservice.Directions({
      api_key: apiKey
  });

  export default class FindRoute extends HTMLElement {
      static get observedAttributes() {
          return ["from-latlon", "to-latlon" ];
      }
      
      attributeChangedCallback( name ) {
          if( name == 'from-latlon' ) {
              this.fromlatlon = this.getAttribute( "from-latlon" );
          }
          
          if( name == 'to-latlon' ) {
              this.tolatlon = this.getAttribute( "to-latlon" );
          }
          
          if( this.tolatlon && this.fromlatlon ) {
              this.doLookup();
          }
          
          this.render();
      }
      
      parseComma( latlon ) {
          let pair = latlon.split( "," );
          pair[0] = parseFloat(pair[0]);
          pair[1] = parseFloat(pair[1]);
          // hmm
          let swap = pair[0]
          pair[0] = pair[1]
          pair[1] = swap
          return pair;
      }

      async doLookup() {
          if( this.started == true ) {
              // To nothing
          }

          this.started = true;
          
          let response = await Directions.calculate({
              coordinates: [
                  this.parseComma(this.fromlatlon),
                  this.parseComma(this.tolatlon)
              ],
              profile: 'driving-car',
              format: 'json',
              api_version: 'v2'
          });

          console.log( "Directions response", response );

          this.started = false;
          this.response = response;
          this.render();
      }

      render() {
          let status = `
    <p>${this.fromlatlon}</p>
    <p>${this.tolatlon}</p>
    <p>${this.started ? "Loading" : "Done"}</p>
  `
          if( this.response ) {
              status += '<table>';
              status += '<tr><th>Instruction</th><th>Distance</th><th>Duration</th><th>Name</th></tr>';
              
              for( let segment of this.response.routes[0].segments[0].steps ) {
                  status += `<tr>
  <td>${segment.instruction}</td>
  <td>${segment.distance}</td>
  <td>${segment.duration}</td>
  <td>${segment.name}</td>
  </tr>`
              }
          }
                
          this.innerHTML = status
            
      }
  }

  customElements.define( 'find-route', FindRoute )
#+end_src

#+begin_src html :tangle find-route.html :exports none
  <html>
    <head>
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <script src="location-lookup.js" type="module"></script>
      <script src="find-route.js" type="module"></script>
      <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body>
      <div class="flex h-screen">
        <div class="w-64 p-4">
          <location-lookup id="from" prompt="Starting Location"></location-lookup>
        </div>
        <div class="w-64 p-4">
          <location-lookup id="to" prompt="Ending Location"></location-lookup>
        </div>

        <div class="w-full">
          <find-route
            id="router"
            from-latlon="41.838942,-73.364755"
            to-latlon="41.752237,-73.409656"
            ></find-route>
          <script>
            const from = document.getElementById( "from" )
            const to   = document.getElementById( "to" )
            const fr   = document.querySelector( "find-route" )

            from.addEventListener( 'location', (e) => {
              const latlon = `${e.detail.lat},${e.detail.lon}`

              fr.setAttribute( "from-latlon", latlon );
            } );

            to.addEventListener( 'location', (e) => {
              const latlon = `${e.detail.lat},${e.detail.lon}`

              fr.setAttribute( "to-latlon", latlon );
            } );
          </script>
        </div>
      </div>
    </body>
  </html>
#+end_src

And [[http://localhost:5173/find-route.html]]

* Drawing the route on the map

{{< img img="route-display.png" fit="800x500 smart">}}

The geometry that comes back from the routing system is compressed,
and we'll need to pull in a library to get out the details.

#+begin_src bash
  npm i @mapbox/polyline
#+end_src

Now we can take that and mount in the polyline where the car is
driving.  I'm extending the previous component so it uses the same
logic.

#+begin_src javascript :tangle route-display.js
  import FindRoute from './find-route.js';
  import polyline from '@mapbox/polyline';
  import 'leaflet/dist/leaflet.css';
  import L from 'leaflet';

  class RouteDisplay extends FindRoute {
      connectedCallback() {
          this.insertAdjacentHTML( 'beforeend', '<div id="map" style="height:100%"></div>' );

          this.map = L.map('map', {
              //center: [ this.lat, this.lon ],
              zoom: 11,
              zoomControl: true
          });
          
          L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
              maxZoom: 19,
              attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
          }).addTo(this.map);
          
          L.control.scale({
              imperial: true,
              maxWidth: 300
          }).addTo(this.map);
      }

      render() {
          if( !this.response || !this.map) {
              return
          }
          
          const geometry = this.response.routes[0].geometry
          const decodedGeometry = polyline.decode(geometry);

          if( this.map && this.polyline ) {
              this.map.removeLayer( this.polyline )
              this.polyline = undefined;
          }
          
          this.polyline = L.polyline(decodedGeometry, {color: 'red'}).addTo(this.map);

          // zoom the map to the polyline
          this.map.fitBounds(this.polyline.getBounds());

        }
    }

    customElements.define( 'route-display', RouteDisplay )
#+end_src

#+begin_src html :tangle route-display.html :exports none
  <html>
    <head>
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <script src="location-lookup.js" type="module"></script>
      <script src="route-display.js" type="module"></script>
      <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body>
      <div class="flex h-screen">
        <div class="w-64 p-4">
          <location-lookup id="from" prompt="Starting Location"></location-lookup>
        </div>
        <div class="w-64 p-4">
          <location-lookup id="to" prompt="Ending Location"></location-lookup>
        </div>

        <div class="w-full">
          <route-display
            id="router"
            from-latlon="41.838942,-73.364755"
            to-latlon="41.752237,-73.409656"
            ></route-display>
          <script>
            const from = document.getElementById( "from" )
            const to   = document.getElementById( "to" )
            const fr   = document.querySelector( "route-display" )

            from.addEventListener( 'location', (e) => {
              const latlon = `${e.detail.lat},${e.detail.lon}`

              fr.setAttribute( "from-latlon", latlon );
            } );

            to.addEventListener( 'location', (e) => {
              const latlon = `${e.detail.lat},${e.detail.lon}`

              fr.setAttribute( "to-latlon", latlon );
            } );
          </script>
        </div>
      </div>
    </body>
  </html>
#+end_src

* Isochrones

Lets map out how far you can drive from a certain place on a map.

{{< img img="isochrones.png" fit="800x500 smart">}}


#+begin_src html :tangle isochrones.html :exports none
  <html>
    <head>
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <script src="location-lookup.js" type="module"></script>
      <script src="isochrones.js" type="module"></script>
      <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body>
      <div class="flex h-screen">
        <div class="w-64 p-4">
          <location-lookup id="from" prompt="Starting Location"></location-lookup>
        </div>
        <div id="map" class="w-full vh">
          <isochrone-map></isochrone-map>
        </div>
      </div>

      <script>
        const ll = document.getElementById( "from" )
        const im = document.querySelector( "isochrone-map" );
        
        ll.addEventListener( 'location', (e) => {
          const latlon = `${e.detail.lat},${e.detail.lon}`
        
          im.setAttribute( "latlon", latlon );
        } );
        
      </script>
      </div>
    </body>
  </html>
#+end_src

#+begin_src javascript :tangle isochrones.js
  import Openrouteservice from 'openrouteservice-js'
  import apiKey from './apiKey.js'
  import 'leaflet/dist/leaflet.css';
  import L from 'leaflet';

  const Isochrones = new Openrouteservice.Isochrones({
      api_key: apiKey
  })

  class IsochroneMap extends HTMLElement {
      static get observedAttributes() {
          return ["latlon"];
      }

      attributeChangedCallback( name ) {
          if( name == 'latlon' ) {
              this.setLatLon();
          }
      }

      setMarker() {
          if( this.map && this.lat && this.lon ) {
              this.map.setView( [this.lat, this.lon] );
              if( this.marker ) {
                  this.marker.remove();
              }
              
              this.marker = L.marker([this.lat, this.lon]).addTo(this.map);
          }
      }
      
      
      setLatLon() {
          let latlon = this.getAttribute( 'latlon' ) || '41.84371,-73.32928';
          
          let s = latlon.split( "," );
          this.lat = s[0];
          this.lon = s[1];
          this.setMarker()

          this.lookup();
      }

      lookup() {
          if( this.lat && this.lon ) {
              console.log( "Doing lookup" );
              Isochrones.calculate( {
                  profile: 'driving-car',
                  locations: [[this.lon, this.lat]],
                  range: [50000],
                  range_type: 'distance',
                  area_units: 'm'
              } ).then( (json) => {
                  console.log( json );
                  this.response = json;

                  let c = json.features[0].geometry.coordinates[0];
                  this.latlngs = []
                  for( let i = 0; i < c.length; i++ ) {
                      this.latlngs.push([c[i][1],c[i][0]]);
                  }
                  
                  if( this.map && this.polygon ) {
                      this.map.removeLayer( this.polygon )
                      this.polygon = undefined;
                  }

                  this.polygon = L.polygon(this.latlngs, {color: 'red'}).addTo(this.map);
                  this.map.fitBounds(this.polygon.getBounds());
              })
          }
      }

      connectedCallback() {
          this.insertAdjacentHTML( 'beforeend', '<div id="map" style="height:100%"></div>' );

          this.setLatLon();
          
          this.map = L.map('map', {
              center: [ this.lat, this.lon ],
              zoom: 11,
              zoomControl: true
          });
          
          L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
              maxZoom: 19,
              attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
          }).addTo(this.map);
          
          L.control.scale({
              imperial: true,
              maxWidth: 300
          }).addTo(this.map);
      }
  }
      
  customElements.define( 'isochrone-map', IsochroneMap );
#+end_src

* Points of interest

We can also look for places of interest on the map.  Looking around in
the north east states, there isn't a whole lot but it's start!

#+begin_src html :tangle pois.html :exports none
  <html>
    <head>
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <script src="location-lookup.js" type="module"></script>
      <script src="pois.js" type="module"></script>
      <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body>
      <div class="flex h-screen">
        <div class="w-64 p-4">
          <location-lookup id="from" prompt="Starting Location"></location-lookup>
        </div>
        <div id="map" class="w-full vh">
          <pois-map></pois-map>
        </div>
      </div>

      <script>
        const ll = document.getElementById( "from" )
        const pm = document.querySelector( "pois-map" );
        
        ll.addEventListener( 'location', (e) => {
          const latlon = `${e.detail.lat},${e.detail.lon}`
        
          pm.setAttribute( "latlon", latlon );
        } );
        
      </script>
      </div>
    </body>
  </html>
#+end_src

=pois.js=:

#+begin_src javascript :tangle pois.js
  import Openrouteservice from 'openrouteservice-js'
  import apiKey from './apiKey.js'

  const Pois = new Openrouteservice.Pois({
      api_key: apiKey
  })

  class PoisMap extends HTMLElement {
      static get observedAttributes() {
          return ["latlon"];
      }
      
      attributeChangedCallback( name ) {
          if( name == 'latlon' ) {
              this.setLatLon();
          }
      }

      connectedCallback() {
          this.setLatLon();
          }

      setLatLon() {
          let latlon = this.getAttribute( 'latlon' ) || '41.84371,-73.32928';
          
          let s = latlon.split( "," );
          this.lat = parseFloat(s[0]);
          this.lon = parseFloat(s[1]);
          
          this.lookup();
      }

      async lookup() {
          let box = [[this.lon, this.lat],
                     [this.lon - 0.05, this.lat - 0.05]]

          Pois.pois({
              geometry: {
                  bbox:box,
                  geojson:{
                      type:"Point",
                      coordinates:box[0],
                  },
                  buffer:250
              },
              timeout: 20000
          }).then( (json) => {
              console.log( json );
              this.response = json;

              this.render();
          })
      }

      render() {
          let stats = "<table><tr><th>Name</th><th>Category</th><th>Coors</th></tr>";

          if( this.response ) {
              for( let poi of this.response.features ) {
                  console.log( poi );
                  let name = ""
                  if( poi.properties.osm_tags ) {
                      name = poi.properties.osm_tags.name;
                  }
                  stats += `<tr>
  <td>${name}</td>
  <td>${JSON.stringify(poi.properties.category_ids)}</td>
  <td>${poi.geometry.coordinates}</td>
  </tr>`;
              }
          }

          stats += "</table>";
          this.innerHTML = stats;
      }
  }

  customElements.define( 'pois-map', PoisMap );
#+end_src


* References

1. https://giscience.github.io/openrouteservice/getting-started
1. https://github.com/GIScience/openrouteservice-js
1. https://digital-geography.com/openrouteservice-api-a-leaflet-example-for-isochrones/
1. https://leafletjs.com/
1. https://openrouteservice.org/dev/#/api-docs/v2/isochrones/{profile}/post   
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
