#+title: Roda + Sequel
#+subtitle: maybe its time to move past sinatra
#+tags[]: ruby, roda, sequel
#+date: 2024-08-27T06:30:10

Sinatra is getitng a bit old in the teeth, and there are a couple of
other ruby api frameworks out there.  [[https://roda.jeremyevans.net/compare_to_sinatra.html][Roda]] by Jeremy Evans seems like
it is another interesting one -- that and [[https://hanamirb.org/][Hanami]] -- and since he did
[[https://sequel.jeremyevans.net/][sequel]] I thought I'd explore what it would take.

So lets get going!

#+begin_src bash
  bundle init
  bundle add rerun roda puma
#+end_src

#+begin_src ruby :tangle config.ru
  # config.ru

  require_relative 'app'

  run App.app
#+end_src

#+begin_src ruby :tangle app_1.rb
  require 'roda'

  class App < Roda
    route do |r|
      r.root do
        "Hello there"
      end
    end
  end
#+end_src

#+begin_src bash
  rerun rackup
#+end_src

* Adding views

#+begin_src bash
  mkdir -p public/css
  mkdir -p public/js
  mkdir -p views
#+end_src

Add =views/layout.erb=

#+begin_src html :tangle views/layout.erb
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <title>Title</title>
      <link rel="stylesheet" href="/css/styles.css">
    </head>

    <body>
      <header>
      </header>
      <main>
        <%= yield %>
      </main>
      <footer>
      </footer>
    </body>
  </html>
#+end_src

Then =public/css/styles.css=

#+begin_src css :tangle public/css/styles.css

  ,*, *::before, *::after {
      box-sizing: border-box;
  }

  body {
      margin: 0;
      font-family: Avenir, Montserrat, Corbel, 'URW Gothic', source-sans-pro, sans-serif;
      font-weight: normal;
      }

  main {
      max-width: 1000px;
      margin: 0 auto;
  }
#+end_src

Then =view/homepage.erb=:

#+begin_src html :tangle views/homepage.erb
  <h1>This is a title</h1>
  <p>Welcome to my new website!</p>
#+end_src

Update =app.rb=
#+begin_src ruby :tangle app_2.rb
  require 'roda'

  class App < Roda
    plugin :static, ["/images", "/css", "/js"]
    plugin :render

    route do |r|
      r.root do
        view( :homepage )
      end
    end
  end
#+end_src


* Adding sequel

This took me a bit to figure out.  Sequel has a slightly different
model than ActiveRecord does, and [[https://speakerdeck.com/janko_m/sequel-when-activerecord-is-not-enough][here's a nice introduction to it.]]

Both roda and sequel are very plugin heavy, which is sort of
refreshing.

#+begin_src bash
  bundle add sequel sqlite3 dotenv
  mkdir -p db/migrations
#+end_src

=.env=:

#+begin_src bash :tangle .env
  DATABASE_URL=sqlite://./db/development.db
#+end_src

#+begin_src ruby :tangle db/migrations/001_accounts.rb
  # db/migrations/001_accounts.rb

  puts "Loading up migration"

  Sequel.migration do
    change do
      create_table(:accounts) do
        primary_key :id
        String :email, null: false
        Boolean :confirmed, default: false
        String :name
        String :login_hash
        DateTime :hash_valid_until, null: true
        DateTime :created_at, null: false
        DateTime :updated_at, null: false
      end
    end
  end
#+end_src

=db.rb=:
#+begin_src ruby :tangle db.rb
  require 'dotenv/load'
  require 'sequel'

  throw "DATABASE_URL is unset" if !ENV['DATABASE_URL'] || ENV['DATABASE_URL'] == ""

  DB = Sequel.connect( ENV['DATABASE_URL'] )

  Sequel::Model.plugin :timestamps, update_on_create: true
#+end_src

=Rakefile=:

#+begin_src ruby :tangle Rakefile
  require 'dotenv/load'

  namespace :db do
    desc "Migration the database"
    task :migrate do
      puts "Calling db:migrate"
      require_relative 'db.rb'
      version = nil
      
      Sequel.extension(:migration)
      
      # Perform migrations based on migration files in a specified directory.
      Sequel::Migrator.apply(DB, 'db/migrations')
      
      # Dump database schema after migration.
      #Rake::Task['db:dump'].invoke
    end
  end
#+end_src

#+begin_src bash :results output
  dotenvx run -- rake db:migrate 
#+end_src

#+RESULTS:
: [dotenvx@1.6.4] injecting env (1) from .env
: Calling db:migrate


** Create the model

#+begin_src bash
mkdir -p models
#+end_src

=models/account.rb=:
#+begin_src ruby :tangle models/account.rb
  # frozen_string_literal: true
  require_relative '../db'
  require 'securerandom'

  class Account < Sequel::Model
    def generate_login_hash
      self.login_hash = SecureRandom.hex(16)
      self.hash_valid_until = Time.now + 3600 # 1 hour in seconds
      save
    end
  end
#+end_src

** Building out account route

#+begin_src bash
  mkdir -p routes
#+end_src


We are going to dynamically load all of the =routes= in the folder so we
don't need to mess around with individually adding them.  It's a nice
pattern.

Update =app.rb=:

#+begin_src ruby :tangle app.rb
  require 'roda'

  class App < Roda
    require_relative 'mailer.rb' # This comes later
    plugin :static, ["/images", "/css", "/js"]
    plugin :render
    plugin :hash_branches
    
    route do |r|
      r.root do
        view( :homepage )
      end
      
      Dir["routes/**/*.rb"].each do |route_file|
        require_relative route_file
      end
      
      r.hash_branches
    end
  end
#+end_src

=routes/account.rb=:
#+begin_src ruby :tangle routes/account.rb
  require_relative '../models/account.rb'

  class App
    hash_branch "account" do |r|
      r.is Integer do |id|
        #account = Account
        "account #{id}"
      end
      
      r.on 'hash' do |hash|
        r.get String do |hash|
          account = Account.where( login_hash: hash ).first
          if account
            "Hello #{account.email}"
          else
            "Not found"
          end
        end
      end
      
      r.is do
        p r.params
        
        r.get do
          "Post to create an account"
        end
                
        r.post do
          account = Account.new( name: r.params["name"], email: r.params["email"] )
          account.generate_login_hash
          
          if account.save
            "Hash is #{account.login_hash}"
          else
            puts "Missing something"
          end
        end
      end
    end
  end

#+end_src

** Debug

#+begin_src bash :results output
  curl http://localhost:9292/account 
#+end_src

#+RESULTS:
: Post to create an account

Creating a new account:

#+begin_src bash :results output
  curl -X POST \
       -F name=Will \
       -F email=wschenk@gmail.com \
       http://localhost:9292/account
#+end_src

#+RESULTS:
: Hash is 174b8bcc0d58ca52b0b2b2b36f326397

Calling it without a hash

#+begin_src bash :results output
  curl http://localhost:9292/account/hash
#+end_src

#+RESULTS:

Calling it with the hash (the idea is that the account is verified)

#+begin_src bash :results output
  curl http://localhost:9292/account/hash/174b8bcc0d58ca52b0b2b2b36f326397
#+end_src

#+RESULTS:
: Hello wschenk@gmail.com

* Email

#+begin_src bash
  bundle add mail
  mkdir -p views/mail
#+end_src


=mailer.rb=:
#+begin_src ruby :tangle mailer.rb
  class App::Mailer < Roda
     plugin :render, views: 'views/mail', layout: nil
     plugin :mailer
     
     route do |r|
       r.on "account", Integer do |id|
         puts "Looking up #{id}"
         @account = Account[id]
         no_mail! unless @account
         
         puts @account
         
         from "tasks@example.com"
         to @account.email
         r.mail "welcome" do
           subject "Your login hash"
           render('welcome_html')
           # text_part render( 'welcome_text' )
           #  html_part render( 'welcome_html' )
         end
       end
     end     
   end
#+end_src

=views/mail/welcome_text.erb=:
#+begin_src ruby :tangle views/mail/welcome_text.erb
  Go to http://localhost:9292/account/hash/<%= @account.login_hash %> to login
#+end_src

=views/mail/welcome_html.erb=:

#+begin_src ruby :tangle views/mail/welcome_html.erb
  Go to
  <a href="http://localhost:9292/account/hash/<%= @account.login_hash %>"
  >http://localhost:9292/account/hash/<%= @account.login_hash %></a>
  to login
#+end_src


** Preview
#+begin_src bash
  bundle add roda-mailer_preview
#+end_src

=routes/mail_view.rb=:
#+begin_src ruby :tangle routes/mail_view.rb
  class App
    plugin :mailer_preview
    
    hash_branch "mail_view" do |r|
      r.is "welcome" do
        mail = Mailer.mail("/account/1/welcome")
        require 'pp'
        pp mail
        preview(mail)
      end
      
      r.is true do
        mailers = ["/welcome"]
        preview_index(mailers)
      end
    end
  end
#+end_src


* References

1. https://github.com/jeremyevans/roda-sequel-stack
1. https://speakerdeck.com/janko_m/sequel-when-activerecord-is-not-enough
1. https://fiachetti.gitlab.io/mastering-roda
1. https://github.com/adam12/roda-mailer_preview
   
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
