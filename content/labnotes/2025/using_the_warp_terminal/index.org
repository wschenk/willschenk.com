#+title: Using the Warp Terminal
#+subtitle: ai in the everywhere
#+tags[]: terminal warp ai
#+date: 2025-01-31T12:19:58
#+draft: true

[[https://www.warp.dev/][Warp, the intelligent terminal]].

The warm demo [[https://www.youtube.com/watch?v=Ab7tRyN62yI][is here]] and pretty cool looking.

Let's install it!

#+begin_src bash
  brew install --cask warp
#+end_src

You can go through the setup process.  You need to create an account to
get the ai features, which is worth doing.


* Looking up github

#+begin_quote
use the gh github cli tool to list out all of the repos that the user
has, and then look through those repos for workflows
#+end_quote

#+begin_quote
can you store those things in a file, and then look through them to
figure out what the latest run and status of each job was
#+end_quote

#+begin_quote
can you loop through what was in that file and see the latest time
that the jobs were run and their success rate
#+end_quote

#+begin_quote
can you put all of these steps into a script
#+end_quote

And at the end of this, it spits out a script that it describes as

#+begin_quote
This is a Bash script that checks GitHub workflow status across repositories. Here's a breakdown of its main functionalities:

1. Command Line Options:
   - `--days N`: Filter workflows from the last N days
   - `--format FORMAT`: Output format (text, json, or csv)
   - `-h, --help`: Show help message

2. Main Features:
   - Uses GitHub CLI (gh) to interact with GitHub API
   - Scans repositories for workflow files
   - Collects workflow run statistics including:
     - Success rates
     - Total number of runs
     - Latest run timestamps
   - Supports multiple output formats (text, JSON, CSV)
   - Color-coded terminal output

3. Key Functions:
   - `check_dependencies`: Verifies required tools (gh, jq) are installed
   - `get_repos_with_workflows`: Scans repositories for workflow files
   - `check_workflow_status`: Analyzes and reports workflow statistics
   - Error handling and temporary file cleanup

Usage example:
bash
The script requires:
- GitHub CLI (gh) with authentication
- jq (JSON processor)
- Active GitHub authentication (`gh auth login`)
#+end_quote


* References
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
